// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef SAVE_GAME_XML_HPP
#define SAVE_GAME_XML_HPP

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

#include <xsd/cxx/xml/dom/serialization-header.hxx>
#include <xsd/cxx/tree/serialization.hxx>
#include <xsd/cxx/tree/serialization/byte.hxx>
#include <xsd/cxx/tree/serialization/unsigned-byte.hxx>
#include <xsd/cxx/tree/serialization/short.hxx>
#include <xsd/cxx/tree/serialization/unsigned-short.hxx>
#include <xsd/cxx/tree/serialization/int.hxx>
#include <xsd/cxx/tree/serialization/unsigned-int.hxx>
#include <xsd/cxx/tree/serialization/long.hxx>
#include <xsd/cxx/tree/serialization/unsigned-long.hxx>
#include <xsd/cxx/tree/serialization/boolean.hxx>
#include <xsd/cxx/tree/serialization/float.hxx>
#include <xsd/cxx/tree/serialization/double.hxx>
#include <xsd/cxx/tree/serialization/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  typedef ::xsd::cxx::tree::content_order content_order;
  // Namespace information and list stream. Used in
  // serialization functions.
  //
  typedef ::xsd::cxx::xml::dom::namespace_info< char > namespace_info;
  typedef ::xsd::cxx::xml::dom::namespace_infomap< char > namespace_infomap;
  typedef ::xsd::cxx::tree::list_stream< char > list_stream;
  typedef ::xsd::cxx::tree::as_double< double_ > as_double;
  typedef ::xsd::cxx::tree::as_decimal< decimal > as_decimal;
  typedef ::xsd::cxx::tree::facet facet;

  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::serialization< char > serialization;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace sgxml
{
  class SaveGameXML;
  class exploredRooms;
  class bonus;
  class players;
  class visited;
  class room;
  class player;
}


#include <memory>    // ::std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

namespace sgxml
{
  class SaveGameXML: public ::xml_schema::type
  {
    public:
    // exploredRooms
    //
    typedef ::sgxml::exploredRooms exploredRooms_type;
    typedef ::xsd::cxx::tree::traits< exploredRooms_type, char > exploredRooms_traits;

    const exploredRooms_type&
    exploredRooms () const;

    exploredRooms_type&
    exploredRooms ();

    void
    exploredRooms (const exploredRooms_type& x);

    void
    exploredRooms (::std::auto_ptr< exploredRooms_type > p);

    // freeByblos
    //
    typedef ::xml_schema::boolean freeByblos_type;
    typedef ::xsd::cxx::tree::traits< freeByblos_type, char > freeByblos_traits;

    const freeByblos_type&
    freeByblos () const;

    freeByblos_type&
    freeByblos ();

    void
    freeByblos (const freeByblos_type& x);

    // freeEgyptus
    //
    typedef ::xml_schema::boolean freeEgyptus_type;
    typedef ::xsd::cxx::tree::traits< freeEgyptus_type, char > freeEgyptus_traits;

    const freeEgyptus_type&
    freeEgyptus () const;

    freeEgyptus_type&
    freeEgyptus ();

    void
    freeEgyptus (const freeEgyptus_type& x);

    // freePenitentiary
    //
    typedef ::xml_schema::boolean freePenitentiary_type;
    typedef ::xsd::cxx::tree::traits< freePenitentiary_type, char > freePenitentiary_traits;

    const freePenitentiary_type&
    freePenitentiary () const;

    freePenitentiary_type&
    freePenitentiary ();

    void
    freePenitentiary (const freePenitentiary_type& x);

    // freeSafari
    //
    typedef ::xml_schema::boolean freeSafari_type;
    typedef ::xsd::cxx::tree::traits< freeSafari_type, char > freeSafari_traits;

    const freeSafari_type&
    freeSafari () const;

    freeSafari_type&
    freeSafari ();

    void
    freeSafari (const freeSafari_type& x);

    // freeBlacktooth
    //
    typedef ::xml_schema::boolean freeBlacktooth_type;
    typedef ::xsd::cxx::tree::traits< freeBlacktooth_type, char > freeBlacktooth_traits;

    const freeBlacktooth_type&
    freeBlacktooth () const;

    freeBlacktooth_type&
    freeBlacktooth ();

    void
    freeBlacktooth (const freeBlacktooth_type& x);

    // bonus
    //
    typedef ::sgxml::bonus bonus_type;
    typedef ::xsd::cxx::tree::traits< bonus_type, char > bonus_traits;

    const bonus_type&
    bonus () const;

    bonus_type&
    bonus ();

    void
    bonus (const bonus_type& x);

    void
    bonus (::std::auto_ptr< bonus_type > p);

    // players
    //
    typedef ::sgxml::players players_type;
    typedef ::xsd::cxx::tree::traits< players_type, char > players_traits;

    const players_type&
    players () const;

    players_type&
    players ();

    void
    players (const players_type& x);

    void
    players (::std::auto_ptr< players_type > p);

    // Constructors.
    //
    SaveGameXML (const exploredRooms_type&,
                 const freeByblos_type&,
                 const freeEgyptus_type&,
                 const freePenitentiary_type&,
                 const freeSafari_type&,
                 const freeBlacktooth_type&,
                 const bonus_type&,
                 const players_type&);

    SaveGameXML (::std::auto_ptr< exploredRooms_type >,
                 const freeByblos_type&,
                 const freeEgyptus_type&,
                 const freePenitentiary_type&,
                 const freeSafari_type&,
                 const freeBlacktooth_type&,
                 ::std::auto_ptr< bonus_type >,
                 ::std::auto_ptr< players_type >);

    SaveGameXML (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    SaveGameXML (const SaveGameXML& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    virtual SaveGameXML*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    SaveGameXML&
    operator= (const SaveGameXML& x);

    virtual 
    ~SaveGameXML ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< exploredRooms_type > exploredRooms_;
    ::xsd::cxx::tree::one< freeByblos_type > freeByblos_;
    ::xsd::cxx::tree::one< freeEgyptus_type > freeEgyptus_;
    ::xsd::cxx::tree::one< freePenitentiary_type > freePenitentiary_;
    ::xsd::cxx::tree::one< freeSafari_type > freeSafari_;
    ::xsd::cxx::tree::one< freeBlacktooth_type > freeBlacktooth_;
    ::xsd::cxx::tree::one< bonus_type > bonus_;
    ::xsd::cxx::tree::one< players_type > players_;
  };

  class exploredRooms: public ::xml_schema::type
  {
    public:
    // visited
    //
    typedef ::sgxml::visited visited_type;
    typedef ::xsd::cxx::tree::sequence< visited_type > visited_sequence;
    typedef visited_sequence::iterator visited_iterator;
    typedef visited_sequence::const_iterator visited_const_iterator;
    typedef ::xsd::cxx::tree::traits< visited_type, char > visited_traits;

    const visited_sequence&
    visited () const;

    visited_sequence&
    visited ();

    void
    visited (const visited_sequence& s);

    // Constructors.
    //
    exploredRooms ();

    exploredRooms (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    exploredRooms (const exploredRooms& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    virtual exploredRooms*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    exploredRooms&
    operator= (const exploredRooms& x);

    virtual 
    ~exploredRooms ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    visited_sequence visited_;
  };

  class bonus: public ::xml_schema::type
  {
    public:
    // room
    //
    typedef ::sgxml::room room_type;
    typedef ::xsd::cxx::tree::sequence< room_type > room_sequence;
    typedef room_sequence::iterator room_iterator;
    typedef room_sequence::const_iterator room_const_iterator;
    typedef ::xsd::cxx::tree::traits< room_type, char > room_traits;

    const room_sequence&
    room () const;

    room_sequence&
    room ();

    void
    room (const room_sequence& s);

    // Constructors.
    //
    bonus ();

    bonus (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    bonus (const bonus& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    virtual bonus*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    bonus&
    operator= (const bonus& x);

    virtual 
    ~bonus ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    room_sequence room_;
  };

  class players: public ::xml_schema::type
  {
    public:
    // player
    //
    typedef ::sgxml::player player_type;
    typedef ::xsd::cxx::tree::sequence< player_type > player_sequence;
    typedef player_sequence::iterator player_iterator;
    typedef player_sequence::const_iterator player_const_iterator;
    typedef ::xsd::cxx::tree::traits< player_type, char > player_traits;

    const player_sequence&
    player () const;

    player_sequence&
    player ();

    void
    player (const player_sequence& s);

    // Constructors.
    //
    players ();

    players (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    players (const players& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    virtual players*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    players&
    operator= (const players& x);

    virtual 
    ~players ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    player_sequence player_;
  };

  class visited: public ::xml_schema::type
  {
    public:
    // filename
    //
    typedef ::xml_schema::string filename_type;
    typedef ::xsd::cxx::tree::traits< filename_type, char > filename_traits;

    const filename_type&
    filename () const;

    filename_type&
    filename ();

    void
    filename (const filename_type& x);

    void
    filename (::std::auto_ptr< filename_type > p);

    // Constructors.
    //
    visited (const filename_type&);

    visited (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    visited (const visited& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    virtual visited*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    visited&
    operator= (const visited& x);

    virtual 
    ~visited ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< filename_type > filename_;
  };

  class room: public ::xml_schema::type
  {
    public:
    // label
    //
    typedef ::xml_schema::short_ label_type;
    typedef ::xsd::cxx::tree::traits< label_type, char > label_traits;

    const label_type&
    label () const;

    label_type&
    label ();

    void
    label (const label_type& x);

    // filename
    //
    typedef ::xml_schema::string filename_type;
    typedef ::xsd::cxx::tree::traits< filename_type, char > filename_traits;

    const filename_type&
    filename () const;

    filename_type&
    filename ();

    void
    filename (const filename_type& x);

    void
    filename (::std::auto_ptr< filename_type > p);

    // Constructors.
    //
    room (const label_type&,
          const filename_type&);

    room (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    room (const room& x,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    virtual room*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    room&
    operator= (const room& x);

    virtual 
    ~room ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< label_type > label_;
    ::xsd::cxx::tree::one< filename_type > filename_;
  };

  class player: public ::xml_schema::type
  {
    public:
    // active
    //
    typedef ::xml_schema::boolean active_type;
    typedef ::xsd::cxx::tree::traits< active_type, char > active_traits;

    const active_type&
    active () const;

    active_type&
    active ();

    void
    active (const active_type& x);

    // roomFilename
    //
    typedef ::xml_schema::string roomFilename_type;
    typedef ::xsd::cxx::tree::traits< roomFilename_type, char > roomFilename_traits;

    const roomFilename_type&
    roomFilename () const;

    roomFilename_type&
    roomFilename ();

    void
    roomFilename (const roomFilename_type& x);

    void
    roomFilename (::std::auto_ptr< roomFilename_type > p);

    // x
    //
    typedef ::xml_schema::int_ x_type;
    typedef ::xsd::cxx::tree::traits< x_type, char > x_traits;

    const x_type&
    x () const;

    x_type&
    x ();

    void
    x (const x_type& x);

    // y
    //
    typedef ::xml_schema::int_ y_type;
    typedef ::xsd::cxx::tree::traits< y_type, char > y_traits;

    const y_type&
    y () const;

    y_type&
    y ();

    void
    y (const y_type& x);

    // z
    //
    typedef ::xml_schema::int_ z_type;
    typedef ::xsd::cxx::tree::traits< z_type, char > z_traits;

    const z_type&
    z () const;

    z_type&
    z ();

    void
    z (const z_type& x);

    // direction
    //
    typedef ::xml_schema::int_ direction_type;
    typedef ::xsd::cxx::tree::traits< direction_type, char > direction_traits;

    const direction_type&
    direction () const;

    direction_type&
    direction ();

    void
    direction (const direction_type& x);

    // entry
    //
    typedef ::xml_schema::int_ entry_type;
    typedef ::xsd::cxx::tree::traits< entry_type, char > entry_traits;

    const entry_type&
    entry () const;

    entry_type&
    entry ();

    void
    entry (const entry_type& x);

    // lives
    //
    typedef ::xml_schema::short_ lives_type;
    typedef ::xsd::cxx::tree::traits< lives_type, char > lives_traits;

    const lives_type&
    lives () const;

    lives_type&
    lives ();

    void
    lives (const lives_type& x);

    // hasHorn
    //
    typedef ::xml_schema::boolean hasHorn_type;
    typedef ::xsd::cxx::tree::traits< hasHorn_type, char > hasHorn_traits;

    const hasHorn_type&
    hasHorn () const;

    hasHorn_type&
    hasHorn ();

    void
    hasHorn (const hasHorn_type& x);

    // hasHandbag
    //
    typedef ::xml_schema::boolean hasHandbag_type;
    typedef ::xsd::cxx::tree::traits< hasHandbag_type, char > hasHandbag_traits;

    const hasHandbag_type&
    hasHandbag () const;

    hasHandbag_type&
    hasHandbag ();

    void
    hasHandbag (const hasHandbag_type& x);

    // ammo
    //
    typedef ::xml_schema::int_ ammo_type;
    typedef ::xsd::cxx::tree::traits< ammo_type, char > ammo_traits;

    const ammo_type&
    ammo () const;

    ammo_type&
    ammo ();

    void
    ammo (const ammo_type& x);

    // label
    //
    typedef ::xml_schema::short_ label_type;
    typedef ::xsd::cxx::tree::traits< label_type, char > label_traits;

    const label_type&
    label () const;

    label_type&
    label ();

    void
    label (const label_type& x);

    // Constructors.
    //
    player (const active_type&,
            const roomFilename_type&,
            const x_type&,
            const y_type&,
            const z_type&,
            const direction_type&,
            const entry_type&,
            const lives_type&,
            const hasHorn_type&,
            const hasHandbag_type&,
            const ammo_type&,
            const label_type&);

    player (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    player (const player& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    virtual player*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    player&
    operator= (const player& x);

    virtual 
    ~player ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< active_type > active_;
    ::xsd::cxx::tree::one< roomFilename_type > roomFilename_;
    ::xsd::cxx::tree::one< x_type > x_;
    ::xsd::cxx::tree::one< y_type > y_;
    ::xsd::cxx::tree::one< z_type > z_;
    ::xsd::cxx::tree::one< direction_type > direction_;
    ::xsd::cxx::tree::one< entry_type > entry_;
    ::xsd::cxx::tree::one< lives_type > lives_;
    ::xsd::cxx::tree::one< hasHorn_type > hasHorn_;
    ::xsd::cxx::tree::one< hasHandbag_type > hasHandbag_;
    ::xsd::cxx::tree::one< ammo_type > ammo_;
    ::xsd::cxx::tree::one< label_type > label_;
  };
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace sgxml
{
  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::sgxml::SaveGameXML >
  savegame (const ::std::string& uri,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::sgxml::SaveGameXML >
  savegame (const ::std::string& uri,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::sgxml::SaveGameXML >
  savegame (const ::std::string& uri,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::sgxml::SaveGameXML >
  savegame (::std::istream& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::sgxml::SaveGameXML >
  savegame (::std::istream& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::sgxml::SaveGameXML >
  savegame (::std::istream& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::sgxml::SaveGameXML >
  savegame (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::sgxml::SaveGameXML >
  savegame (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::sgxml::SaveGameXML >
  savegame (::std::istream& is,
            const ::std::string& id,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::sgxml::SaveGameXML >
  savegame (::xercesc::InputSource& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::sgxml::SaveGameXML >
  savegame (::xercesc::InputSource& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::sgxml::SaveGameXML >
  savegame (::xercesc::InputSource& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::sgxml::SaveGameXML >
  savegame (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::sgxml::SaveGameXML >
  savegame (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace sgxml
{
  // Serialize to std::ostream.
  //

  void
  savegame (::std::ostream& os,
            const ::sgxml::SaveGameXML& x, 
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

  void
  savegame (::std::ostream& os,
            const ::sgxml::SaveGameXML& x, 
            ::xml_schema::error_handler& eh,
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

  void
  savegame (::std::ostream& os,
            const ::sgxml::SaveGameXML& x, 
            ::xercesc::DOMErrorHandler& eh,
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  savegame (::xercesc::XMLFormatTarget& ft,
            const ::sgxml::SaveGameXML& x, 
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

  void
  savegame (::xercesc::XMLFormatTarget& ft,
            const ::sgxml::SaveGameXML& x, 
            ::xml_schema::error_handler& eh,
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

  void
  savegame (::xercesc::XMLFormatTarget& ft,
            const ::sgxml::SaveGameXML& x, 
            ::xercesc::DOMErrorHandler& eh,
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  savegame (::xercesc::DOMDocument& d,
            const ::sgxml::SaveGameXML& x,
            ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  savegame (const ::sgxml::SaveGameXML& x, 
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            ::xml_schema::flags f = 0);

  void
  operator<< (::xercesc::DOMElement&, const SaveGameXML&);

  void
  operator<< (::xercesc::DOMElement&, const exploredRooms&);

  void
  operator<< (::xercesc::DOMElement&, const bonus&);

  void
  operator<< (::xercesc::DOMElement&, const players&);

  void
  operator<< (::xercesc::DOMElement&, const visited&);

  void
  operator<< (::xercesc::DOMElement&, const room&);

  void
  operator<< (::xercesc::DOMElement&, const player&);
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // SAVE_GAME_XML_HPP

// Copyright (C) 2005-2007 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SaveGameXML.hpp"

namespace sgxml
{
  // SaveGameXML
  // 

  const SaveGameXML::exploredRooms_type& SaveGameXML::
  exploredRooms () const
  {
    return this->exploredRooms_.get ();
  }

  SaveGameXML::exploredRooms_type& SaveGameXML::
  exploredRooms ()
  {
    return this->exploredRooms_.get ();
  }

  void SaveGameXML::
  exploredRooms (const exploredRooms_type& exploredRooms)
  {
    this->exploredRooms_.set (exploredRooms);
  }

  void SaveGameXML::
  exploredRooms (::std::auto_ptr< exploredRooms_type > exploredRooms)
  {
    this->exploredRooms_.set (exploredRooms);
  }

  const SaveGameXML::freeByblos_type& SaveGameXML::
  freeByblos () const
  {
    return this->freeByblos_.get ();
  }

  SaveGameXML::freeByblos_type& SaveGameXML::
  freeByblos ()
  {
    return this->freeByblos_.get ();
  }

  void SaveGameXML::
  freeByblos (const freeByblos_type& freeByblos)
  {
    this->freeByblos_.set (freeByblos);
  }

  const SaveGameXML::freeEgyptus_type& SaveGameXML::
  freeEgyptus () const
  {
    return this->freeEgyptus_.get ();
  }

  SaveGameXML::freeEgyptus_type& SaveGameXML::
  freeEgyptus ()
  {
    return this->freeEgyptus_.get ();
  }

  void SaveGameXML::
  freeEgyptus (const freeEgyptus_type& freeEgyptus)
  {
    this->freeEgyptus_.set (freeEgyptus);
  }

  const SaveGameXML::freePenitentiary_type& SaveGameXML::
  freePenitentiary () const
  {
    return this->freePenitentiary_.get ();
  }

  SaveGameXML::freePenitentiary_type& SaveGameXML::
  freePenitentiary ()
  {
    return this->freePenitentiary_.get ();
  }

  void SaveGameXML::
  freePenitentiary (const freePenitentiary_type& freePenitentiary)
  {
    this->freePenitentiary_.set (freePenitentiary);
  }

  const SaveGameXML::freeSafari_type& SaveGameXML::
  freeSafari () const
  {
    return this->freeSafari_.get ();
  }

  SaveGameXML::freeSafari_type& SaveGameXML::
  freeSafari ()
  {
    return this->freeSafari_.get ();
  }

  void SaveGameXML::
  freeSafari (const freeSafari_type& freeSafari)
  {
    this->freeSafari_.set (freeSafari);
  }

  const SaveGameXML::freeBlacktooth_type& SaveGameXML::
  freeBlacktooth () const
  {
    return this->freeBlacktooth_.get ();
  }

  SaveGameXML::freeBlacktooth_type& SaveGameXML::
  freeBlacktooth ()
  {
    return this->freeBlacktooth_.get ();
  }

  void SaveGameXML::
  freeBlacktooth (const freeBlacktooth_type& freeBlacktooth)
  {
    this->freeBlacktooth_.set (freeBlacktooth);
  }

  const SaveGameXML::bonus_type& SaveGameXML::
  bonus () const
  {
    return this->bonus_.get ();
  }

  SaveGameXML::bonus_type& SaveGameXML::
  bonus ()
  {
    return this->bonus_.get ();
  }

  void SaveGameXML::
  bonus (const bonus_type& bonus)
  {
    this->bonus_.set (bonus);
  }

  void SaveGameXML::
  bonus (::std::auto_ptr< bonus_type > bonus)
  {
    this->bonus_.set (bonus);
  }

  const SaveGameXML::players_type& SaveGameXML::
  players () const
  {
    return this->players_.get ();
  }

  SaveGameXML::players_type& SaveGameXML::
  players ()
  {
    return this->players_.get ();
  }

  void SaveGameXML::
  players (const players_type& players)
  {
    this->players_.set (players);
  }

  void SaveGameXML::
  players (::std::auto_ptr< players_type > players)
  {
    this->players_.set (players);
  }


  // exploredRooms
  // 

  const exploredRooms::visited_sequence& exploredRooms::
  visited () const
  {
    return this->visited_;
  }

  exploredRooms::visited_sequence& exploredRooms::
  visited ()
  {
    return this->visited_;
  }

  void exploredRooms::
  visited (const visited_sequence& visited)
  {
    this->visited_ = visited;
  }


  // bonus
  // 

  const bonus::room_sequence& bonus::
  room () const
  {
    return this->room_;
  }

  bonus::room_sequence& bonus::
  room ()
  {
    return this->room_;
  }

  void bonus::
  room (const room_sequence& room)
  {
    this->room_ = room;
  }


  // players
  // 

  const players::player_sequence& players::
  player () const
  {
    return this->player_;
  }

  players::player_sequence& players::
  player ()
  {
    return this->player_;
  }

  void players::
  player (const player_sequence& player)
  {
    this->player_ = player;
  }


  // visited
  // 

  const visited::filename_type& visited::
  filename () const
  {
    return this->filename_.get ();
  }

  visited::filename_type& visited::
  filename ()
  {
    return this->filename_.get ();
  }

  void visited::
  filename (const filename_type& filename)
  {
    this->filename_.set (filename);
  }

  void visited::
  filename (::std::auto_ptr< filename_type > filename)
  {
    this->filename_.set (filename);
  }


  // room
  // 

  const room::label_type& room::
  label () const
  {
    return this->label_.get ();
  }

  room::label_type& room::
  label ()
  {
    return this->label_.get ();
  }

  void room::
  label (const label_type& label)
  {
    this->label_.set (label);
  }

  const room::filename_type& room::
  filename () const
  {
    return this->filename_.get ();
  }

  room::filename_type& room::
  filename ()
  {
    return this->filename_.get ();
  }

  void room::
  filename (const filename_type& filename)
  {
    this->filename_.set (filename);
  }

  void room::
  filename (::std::auto_ptr< filename_type > filename)
  {
    this->filename_.set (filename);
  }


  // player
  // 

  const player::active_type& player::
  active () const
  {
    return this->active_.get ();
  }

  player::active_type& player::
  active ()
  {
    return this->active_.get ();
  }

  void player::
  active (const active_type& active)
  {
    this->active_.set (active);
  }

  const player::roomFilename_type& player::
  roomFilename () const
  {
    return this->roomFilename_.get ();
  }

  player::roomFilename_type& player::
  roomFilename ()
  {
    return this->roomFilename_.get ();
  }

  void player::
  roomFilename (const roomFilename_type& roomFilename)
  {
    this->roomFilename_.set (roomFilename);
  }

  void player::
  roomFilename (::std::auto_ptr< roomFilename_type > roomFilename)
  {
    this->roomFilename_.set (roomFilename);
  }

  const player::x_type& player::
  x () const
  {
    return this->x_.get ();
  }

  player::x_type& player::
  x ()
  {
    return this->x_.get ();
  }

  void player::
  x (const x_type& x)
  {
    this->x_.set (x);
  }

  const player::y_type& player::
  y () const
  {
    return this->y_.get ();
  }

  player::y_type& player::
  y ()
  {
    return this->y_.get ();
  }

  void player::
  y (const y_type& y)
  {
    this->y_.set (y);
  }

  const player::z_type& player::
  z () const
  {
    return this->z_.get ();
  }

  player::z_type& player::
  z ()
  {
    return this->z_.get ();
  }

  void player::
  z (const z_type& z)
  {
    this->z_.set (z);
  }

  const player::direction_type& player::
  direction () const
  {
    return this->direction_.get ();
  }

  player::direction_type& player::
  direction ()
  {
    return this->direction_.get ();
  }

  void player::
  direction (const direction_type& direction)
  {
    this->direction_.set (direction);
  }

  const player::entry_type& player::
  entry () const
  {
    return this->entry_.get ();
  }

  player::entry_type& player::
  entry ()
  {
    return this->entry_.get ();
  }

  void player::
  entry (const entry_type& entry)
  {
    this->entry_.set (entry);
  }

  const player::lives_type& player::
  lives () const
  {
    return this->lives_.get ();
  }

  player::lives_type& player::
  lives ()
  {
    return this->lives_.get ();
  }

  void player::
  lives (const lives_type& lives)
  {
    this->lives_.set (lives);
  }

  const player::hasHorn_type& player::
  hasHorn () const
  {
    return this->hasHorn_.get ();
  }

  player::hasHorn_type& player::
  hasHorn ()
  {
    return this->hasHorn_.get ();
  }

  void player::
  hasHorn (const hasHorn_type& hasHorn)
  {
    this->hasHorn_.set (hasHorn);
  }

  const player::hasHandbag_type& player::
  hasHandbag () const
  {
    return this->hasHandbag_.get ();
  }

  player::hasHandbag_type& player::
  hasHandbag ()
  {
    return this->hasHandbag_.get ();
  }

  void player::
  hasHandbag (const hasHandbag_type& hasHandbag)
  {
    this->hasHandbag_.set (hasHandbag);
  }

  const player::ammo_type& player::
  ammo () const
  {
    return this->ammo_.get ();
  }

  player::ammo_type& player::
  ammo ()
  {
    return this->ammo_.get ();
  }

  void player::
  ammo (const ammo_type& ammo)
  {
    this->ammo_.set (ammo);
  }

  const player::label_type& player::
  label () const
  {
    return this->label_.get ();
  }

  player::label_type& player::
  label ()
  {
    return this->label_.get ();
  }

  void player::
  label (const label_type& label)
  {
    this->label_.set (label);
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace sgxml
{
  // SaveGameXML
  //

  SaveGameXML::
  SaveGameXML (const exploredRooms_type& exploredRooms,
               const freeByblos_type& freeByblos,
               const freeEgyptus_type& freeEgyptus,
               const freePenitentiary_type& freePenitentiary,
               const freeSafari_type& freeSafari,
               const freeBlacktooth_type& freeBlacktooth,
               const bonus_type& bonus,
               const players_type& players)
  : ::xml_schema::type (),
    exploredRooms_ (exploredRooms, ::xml_schema::flags (), this),
    freeByblos_ (freeByblos, ::xml_schema::flags (), this),
    freeEgyptus_ (freeEgyptus, ::xml_schema::flags (), this),
    freePenitentiary_ (freePenitentiary, ::xml_schema::flags (), this),
    freeSafari_ (freeSafari, ::xml_schema::flags (), this),
    freeBlacktooth_ (freeBlacktooth, ::xml_schema::flags (), this),
    bonus_ (bonus, ::xml_schema::flags (), this),
    players_ (players, ::xml_schema::flags (), this)
  {
  }

  SaveGameXML::
  SaveGameXML (const SaveGameXML& x,
               ::xml_schema::flags f,
               ::xml_schema::type* c)
  : ::xml_schema::type (x, f, c),
    exploredRooms_ (x.exploredRooms_, f, this),
    freeByblos_ (x.freeByblos_, f, this),
    freeEgyptus_ (x.freeEgyptus_, f, this),
    freePenitentiary_ (x.freePenitentiary_, f, this),
    freeSafari_ (x.freeSafari_, f, this),
    freeBlacktooth_ (x.freeBlacktooth_, f, this),
    bonus_ (x.bonus_, f, this),
    players_ (x.players_, f, this)
  {
  }

  SaveGameXML::
  SaveGameXML (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f,
               ::xml_schema::type* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    exploredRooms_ (f, this),
    freeByblos_ (f, this),
    freeEgyptus_ (f, this),
    freePenitentiary_ (f, this),
    freeSafari_ (f, this),
    freeBlacktooth_ (f, this),
    bonus_ (f, this),
    players_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e);
      this->parse (p, f);
    }
  }

  void SaveGameXML::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // exploredRooms
      //
      if (n.name () == "exploredRooms" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< exploredRooms_type > r (
          exploredRooms_traits::create (i, f, this));

        if (!exploredRooms_.present ())
        {
          this->exploredRooms (r);
          continue;
        }
      }

      // freeByblos
      //
      if (n.name () == "freeByblos" && n.namespace_ ().empty ())
      {
        if (!freeByblos_.present ())
        {
          this->freeByblos (freeByblos_traits::create (i, f, this));
          continue;
        }
      }

      // freeEgyptus
      //
      if (n.name () == "freeEgyptus" && n.namespace_ ().empty ())
      {
        if (!freeEgyptus_.present ())
        {
          this->freeEgyptus (freeEgyptus_traits::create (i, f, this));
          continue;
        }
      }

      // freePenitentiary
      //
      if (n.name () == "freePenitentiary" && n.namespace_ ().empty ())
      {
        if (!freePenitentiary_.present ())
        {
          this->freePenitentiary (freePenitentiary_traits::create (i, f, this));
          continue;
        }
      }

      // freeSafari
      //
      if (n.name () == "freeSafari" && n.namespace_ ().empty ())
      {
        if (!freeSafari_.present ())
        {
          this->freeSafari (freeSafari_traits::create (i, f, this));
          continue;
        }
      }

      // freeBlacktooth
      //
      if (n.name () == "freeBlacktooth" && n.namespace_ ().empty ())
      {
        if (!freeBlacktooth_.present ())
        {
          this->freeBlacktooth (freeBlacktooth_traits::create (i, f, this));
          continue;
        }
      }

      // bonus
      //
      if (n.name () == "bonus" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< bonus_type > r (
          bonus_traits::create (i, f, this));

        if (!bonus_.present ())
        {
          this->bonus (r);
          continue;
        }
      }

      // players
      //
      if (n.name () == "players" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< players_type > r (
          players_traits::create (i, f, this));

        if (!players_.present ())
        {
          this->players (r);
          continue;
        }
      }

      break;
    }

    if (!exploredRooms_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "exploredRooms",
        "");
    }

    if (!freeByblos_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "freeByblos",
        "");
    }

    if (!freeEgyptus_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "freeEgyptus",
        "");
    }

    if (!freePenitentiary_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "freePenitentiary",
        "");
    }

    if (!freeSafari_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "freeSafari",
        "");
    }

    if (!freeBlacktooth_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "freeBlacktooth",
        "");
    }

    if (!bonus_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "bonus",
        "");
    }

    if (!players_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "players",
        "");
    }
  }

  SaveGameXML* SaveGameXML::
  _clone (::xml_schema::flags f,
          ::xml_schema::type* c) const
  {
    return new SaveGameXML (*this, f, c);
  }

  // exploredRooms
  //

  exploredRooms::
  exploredRooms ()
  : ::xml_schema::type (),
    visited_ (::xml_schema::flags (), this)
  {
  }

  exploredRooms::
  exploredRooms (const exploredRooms& x,
                 ::xml_schema::flags f,
                 ::xml_schema::type* c)
  : ::xml_schema::type (x, f, c),
    visited_ (x.visited_, f, this)
  {
  }

  exploredRooms::
  exploredRooms (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f,
                 ::xml_schema::type* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    visited_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e);
      this->parse (p, f);
    }
  }

  void exploredRooms::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // visited
      //
      if (n.name () == "visited" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< visited_type > r (
          visited_traits::create (i, f, this));

        this->visited ().push_back (r);
        continue;
      }

      break;
    }
  }

  exploredRooms* exploredRooms::
  _clone (::xml_schema::flags f,
          ::xml_schema::type* c) const
  {
    return new exploredRooms (*this, f, c);
  }

  // bonus
  //

  bonus::
  bonus ()
  : ::xml_schema::type (),
    room_ (::xml_schema::flags (), this)
  {
  }

  bonus::
  bonus (const bonus& x,
         ::xml_schema::flags f,
         ::xml_schema::type* c)
  : ::xml_schema::type (x, f, c),
    room_ (x.room_, f, this)
  {
  }

  bonus::
  bonus (const ::xercesc::DOMElement& e,
         ::xml_schema::flags f,
         ::xml_schema::type* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    room_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e);
      this->parse (p, f);
    }
  }

  void bonus::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // room
      //
      if (n.name () == "room" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< room_type > r (
          room_traits::create (i, f, this));

        this->room ().push_back (r);
        continue;
      }

      break;
    }
  }

  bonus* bonus::
  _clone (::xml_schema::flags f,
          ::xml_schema::type* c) const
  {
    return new bonus (*this, f, c);
  }

  // players
  //

  players::
  players ()
  : ::xml_schema::type (),
    player_ (::xml_schema::flags (), this)
  {
  }

  players::
  players (const players& x,
           ::xml_schema::flags f,
           ::xml_schema::type* c)
  : ::xml_schema::type (x, f, c),
    player_ (x.player_, f, this)
  {
  }

  players::
  players (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f,
           ::xml_schema::type* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    player_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e);
      this->parse (p, f);
    }
  }

  void players::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // player
      //
      if (n.name () == "player" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< player_type > r (
          player_traits::create (i, f, this));

        this->player ().push_back (r);
        continue;
      }

      break;
    }
  }

  players* players::
  _clone (::xml_schema::flags f,
          ::xml_schema::type* c) const
  {
    return new players (*this, f, c);
  }

  // visited
  //

  visited::
  visited (const filename_type& filename)
  : ::xml_schema::type (),
    filename_ (filename, ::xml_schema::flags (), this)
  {
  }

  visited::
  visited (const visited& x,
           ::xml_schema::flags f,
           ::xml_schema::type* c)
  : ::xml_schema::type (x, f, c),
    filename_ (x.filename_, f, this)
  {
  }

  visited::
  visited (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f,
           ::xml_schema::type* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    filename_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e);
      this->parse (p, f);
    }
  }

  void visited::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "filename" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< filename_type > r (
          filename_traits::create (i, f, this));

        this->filename (r);
        continue;
      }
    }

    if (!filename_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "filename",
        "");
    }
  }

  visited* visited::
  _clone (::xml_schema::flags f,
          ::xml_schema::type* c) const
  {
    return new visited (*this, f, c);
  }

  // room
  //

  room::
  room (const label_type& label,
        const filename_type& filename)
  : ::xml_schema::type (),
    label_ (label, ::xml_schema::flags (), this),
    filename_ (filename, ::xml_schema::flags (), this)
  {
  }

  room::
  room (const room& x,
        ::xml_schema::flags f,
        ::xml_schema::type* c)
  : ::xml_schema::type (x, f, c),
    label_ (x.label_, f, this),
    filename_ (x.filename_, f, this)
  {
  }

  room::
  room (const ::xercesc::DOMElement& e,
        ::xml_schema::flags f,
        ::xml_schema::type* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    label_ (f, this),
    filename_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e);
      this->parse (p, f);
    }
  }

  void room::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // label
      //
      if (n.name () == "label" && n.namespace_ ().empty ())
      {
        if (!label_.present ())
        {
          this->label (label_traits::create (i, f, this));
          continue;
        }
      }

      break;
    }

    if (!label_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "label",
        "");
    }

    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "filename" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< filename_type > r (
          filename_traits::create (i, f, this));

        this->filename (r);
        continue;
      }
    }

    if (!filename_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "filename",
        "");
    }
  }

  room* room::
  _clone (::xml_schema::flags f,
          ::xml_schema::type* c) const
  {
    return new room (*this, f, c);
  }

  // player
  //

  player::
  player (const active_type& active,
          const roomFilename_type& roomFilename,
          const x_type& x,
          const y_type& y,
          const z_type& z,
          const direction_type& direction,
          const entry_type& entry,
          const lives_type& lives,
          const hasHorn_type& hasHorn,
          const hasHandbag_type& hasHandbag,
          const ammo_type& ammo,
          const label_type& label)
  : ::xml_schema::type (),
    active_ (active, ::xml_schema::flags (), this),
    roomFilename_ (roomFilename, ::xml_schema::flags (), this),
    x_ (x, ::xml_schema::flags (), this),
    y_ (y, ::xml_schema::flags (), this),
    z_ (z, ::xml_schema::flags (), this),
    direction_ (direction, ::xml_schema::flags (), this),
    entry_ (entry, ::xml_schema::flags (), this),
    lives_ (lives, ::xml_schema::flags (), this),
    hasHorn_ (hasHorn, ::xml_schema::flags (), this),
    hasHandbag_ (hasHandbag, ::xml_schema::flags (), this),
    ammo_ (ammo, ::xml_schema::flags (), this),
    label_ (label, ::xml_schema::flags (), this)
  {
  }

  player::
  player (const player& x,
          ::xml_schema::flags f,
          ::xml_schema::type* c)
  : ::xml_schema::type (x, f, c),
    active_ (x.active_, f, this),
    roomFilename_ (x.roomFilename_, f, this),
    x_ (x.x_, f, this),
    y_ (x.y_, f, this),
    z_ (x.z_, f, this),
    direction_ (x.direction_, f, this),
    entry_ (x.entry_, f, this),
    lives_ (x.lives_, f, this),
    hasHorn_ (x.hasHorn_, f, this),
    hasHandbag_ (x.hasHandbag_, f, this),
    ammo_ (x.ammo_, f, this),
    label_ (x.label_, f, this)
  {
  }

  player::
  player (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f,
          ::xml_schema::type* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    active_ (f, this),
    roomFilename_ (f, this),
    x_ (f, this),
    y_ (f, this),
    z_ (f, this),
    direction_ (f, this),
    entry_ (f, this),
    lives_ (f, this),
    hasHorn_ (f, this),
    hasHandbag_ (f, this),
    ammo_ (f, this),
    label_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e);
      this->parse (p, f);
    }
  }

  void player::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // active
      //
      if (n.name () == "active" && n.namespace_ ().empty ())
      {
        if (!active_.present ())
        {
          this->active (active_traits::create (i, f, this));
          continue;
        }
      }

      // roomFilename
      //
      if (n.name () == "roomFilename" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< roomFilename_type > r (
          roomFilename_traits::create (i, f, this));

        if (!roomFilename_.present ())
        {
          this->roomFilename (r);
          continue;
        }
      }

      // x
      //
      if (n.name () == "x" && n.namespace_ ().empty ())
      {
        if (!x_.present ())
        {
          this->x (x_traits::create (i, f, this));
          continue;
        }
      }

      // y
      //
      if (n.name () == "y" && n.namespace_ ().empty ())
      {
        if (!y_.present ())
        {
          this->y (y_traits::create (i, f, this));
          continue;
        }
      }

      // z
      //
      if (n.name () == "z" && n.namespace_ ().empty ())
      {
        if (!z_.present ())
        {
          this->z (z_traits::create (i, f, this));
          continue;
        }
      }

      // direction
      //
      if (n.name () == "direction" && n.namespace_ ().empty ())
      {
        if (!direction_.present ())
        {
          this->direction (direction_traits::create (i, f, this));
          continue;
        }
      }

      // entry
      //
      if (n.name () == "entry" && n.namespace_ ().empty ())
      {
        if (!entry_.present ())
        {
          this->entry (entry_traits::create (i, f, this));
          continue;
        }
      }

      // lives
      //
      if (n.name () == "lives" && n.namespace_ ().empty ())
      {
        if (!lives_.present ())
        {
          this->lives (lives_traits::create (i, f, this));
          continue;
        }
      }

      // hasHorn
      //
      if (n.name () == "hasHorn" && n.namespace_ ().empty ())
      {
        if (!hasHorn_.present ())
        {
          this->hasHorn (hasHorn_traits::create (i, f, this));
          continue;
        }
      }

      // hasHandbag
      //
      if (n.name () == "hasHandbag" && n.namespace_ ().empty ())
      {
        if (!hasHandbag_.present ())
        {
          this->hasHandbag (hasHandbag_traits::create (i, f, this));
          continue;
        }
      }

      // ammo
      //
      if (n.name () == "ammo" && n.namespace_ ().empty ())
      {
        if (!ammo_.present ())
        {
          this->ammo (ammo_traits::create (i, f, this));
          continue;
        }
      }

      break;
    }

    if (!active_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "active",
        "");
    }

    if (!roomFilename_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "roomFilename",
        "");
    }

    if (!x_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "x",
        "");
    }

    if (!y_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "y",
        "");
    }

    if (!z_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "z",
        "");
    }

    if (!direction_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "direction",
        "");
    }

    if (!entry_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "entry",
        "");
    }

    if (!lives_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "lives",
        "");
    }

    if (!hasHorn_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "hasHorn",
        "");
    }

    if (!hasHandbag_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "hasHandbag",
        "");
    }

    if (!ammo_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "ammo",
        "");
    }

    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "label" && n.namespace_ ().empty ())
      {
        this->label (label_traits::create (i, f, this));
        continue;
      }
    }

    if (!label_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "label",
        "");
    }
  }

  player* player::
  _clone (::xml_schema::flags f,
          ::xml_schema::type* c) const
  {
    return new player (*this, f, c);
  }
}

#include <istream>
#include <xercesc/framework/Wrapper4InputSource.hpp>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace sgxml
{
  ::std::auto_ptr< ::sgxml::SaveGameXML >
  savegame (const ::std::string& u,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::sgxml::SaveGameXML > r (
      ::sgxml::savegame (
        d.get (), f | ::xml_schema::flags::own_dom, p));

    if (f & ::xml_schema::flags::keep_dom)
      d.release ();

    return r;
  }

  ::std::auto_ptr< ::sgxml::SaveGameXML >
  savegame (const ::std::string& u,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d)
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::sgxml::SaveGameXML > r (
      ::sgxml::savegame (
        d.get (), f | ::xml_schema::flags::own_dom, p));

    if (f & ::xml_schema::flags::keep_dom)
      d.release ();

    return r;
  }

  ::std::auto_ptr< ::sgxml::SaveGameXML >
  savegame (const ::std::string& u,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d)
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::sgxml::SaveGameXML > r (
      ::sgxml::savegame (
        d.get (), f | ::xml_schema::flags::own_dom, p));

    if (f & ::xml_schema::flags::keep_dom)
      d.release ();

    return r;
  }

  ::std::auto_ptr< ::sgxml::SaveGameXML >
  savegame (::std::istream& is,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    ::xercesc::Wrapper4InputSource wrap (&isrc, false);
    return ::sgxml::savegame (wrap, f, p);
  }

  ::std::auto_ptr< ::sgxml::SaveGameXML >
  savegame (::std::istream& is,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    ::xercesc::Wrapper4InputSource wrap (&isrc, false);
    return ::sgxml::savegame (wrap, h, f, p);
  }

  ::std::auto_ptr< ::sgxml::SaveGameXML >
  savegame (::std::istream& is,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    ::xercesc::Wrapper4InputSource wrap (&isrc, false);
    return ::sgxml::savegame (wrap, h, f, p);
  }

  ::std::auto_ptr< ::sgxml::SaveGameXML >
  savegame (::std::istream& is,
            const ::std::string& sid,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    ::xercesc::Wrapper4InputSource wrap (&isrc, false);
    return ::sgxml::savegame (wrap, f, p);
  }

  ::std::auto_ptr< ::sgxml::SaveGameXML >
  savegame (::std::istream& is,
            const ::std::string& sid,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    ::xercesc::Wrapper4InputSource wrap (&isrc, false);
    return ::sgxml::savegame (wrap, h, f, p);
  }

  ::std::auto_ptr< ::sgxml::SaveGameXML >
  savegame (::std::istream& is,
            const ::std::string& sid,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    ::xercesc::Wrapper4InputSource wrap (&isrc, false);
    return ::sgxml::savegame (wrap, h, f, p);
  }

  ::std::auto_ptr< ::sgxml::SaveGameXML >
  savegame (const ::xercesc::DOMInputSource& i,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::sgxml::SaveGameXML > r (
      ::sgxml::savegame (
        d.get (), f | ::xml_schema::flags::own_dom, p));

    if (f & ::xml_schema::flags::keep_dom)
      d.release ();

    return r;
  }

  ::std::auto_ptr< ::sgxml::SaveGameXML >
  savegame (const ::xercesc::DOMInputSource& i,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d)
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::sgxml::SaveGameXML > r (
      ::sgxml::savegame (
        d.get (), f | ::xml_schema::flags::own_dom, p));

    if (f & ::xml_schema::flags::keep_dom)
      d.release ();

    return r;
  }

  ::std::auto_ptr< ::sgxml::SaveGameXML >
  savegame (const ::xercesc::DOMInputSource& i,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d)
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::sgxml::SaveGameXML > r (
      ::sgxml::savegame (
        d.get (), f | ::xml_schema::flags::own_dom, p));

    if (f & ::xml_schema::flags::keep_dom)
      d.release ();

    return r;
  }

  ::std::auto_ptr< ::sgxml::SaveGameXML >
  savegame (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::sgxml::SaveGameXML > r (
        ::sgxml::savegame (
          c.get (), f | ::xml_schema::flags::own_dom, p));

      c.release ();
      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "savegame" &&
        n.namespace_ () == "")
    {
      ::std::auto_ptr< ::sgxml::SaveGameXML > r (
        ::xsd::cxx::tree::traits< ::sgxml::SaveGameXML, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "savegame",
      "");
  }

  ::std::auto_ptr< ::sgxml::SaveGameXML >
  savegame (::xercesc::DOMDocument* d,
            ::xml_schema::flags f,
            const ::xml_schema::properties&)
  {
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    const ::xercesc::DOMElement& e (
      c.get ()
      ? *c->getDocumentElement ()
      : *d->getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "savegame" &&
        n.namespace_ () == "")
    {
      ::std::auto_ptr< ::sgxml::SaveGameXML > r (
        ::xsd::cxx::tree::traits< ::sgxml::SaveGameXML, char >::create (
          e, f, 0));
      c.release ();
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "savegame",
      "");
  }
}

#include <ostream>
#include <xsd/cxx/xml/dom/serialization-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace sgxml
{
  void
  savegame (::std::ostream& o,
            const ::sgxml::SaveGameXML& s,
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e,
            ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::sgxml::savegame (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  savegame (::std::ostream& o,
            const ::sgxml::SaveGameXML& s,
            const ::xml_schema::namespace_infomap& m,
            ::xml_schema::error_handler& h,
            const ::std::string& e,
            ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::sgxml::savegame (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  savegame (::std::ostream& o,
            const ::sgxml::SaveGameXML& s,
            const ::xml_schema::namespace_infomap& m,
            ::xercesc::DOMErrorHandler& h,
            const ::std::string& e,
            ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::sgxml::savegame (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  savegame (::xercesc::XMLFormatTarget& t,
            const ::sgxml::SaveGameXML& s,
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e,
            ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::sgxml::savegame (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  savegame (::xercesc::XMLFormatTarget& t,
            const ::sgxml::SaveGameXML& s,
            const ::xml_schema::namespace_infomap& m,
            ::xml_schema::error_handler& h,
            const ::std::string& e,
            ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::sgxml::savegame (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  savegame (::xercesc::XMLFormatTarget& t,
            const ::sgxml::SaveGameXML& s,
            const ::xml_schema::namespace_infomap& m,
            ::xercesc::DOMErrorHandler& h,
            const ::std::string& e,
            ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::sgxml::savegame (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  savegame (::xercesc::DOMDocument& d,
            const ::sgxml::SaveGameXML& s,
            ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "savegame" &&
        n.namespace_ () == "")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "savegame",
        "");
    }
  }

  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
  savegame (const ::sgxml::SaveGameXML& s,
            const ::xml_schema::namespace_infomap& m,
            ::xml_schema::flags f)
  {
    try
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "savegame",
          "",
          m, f));

      ::sgxml::savegame (*d, s, f);
      return d;
    }
    catch (const ::xsd::cxx::xml::dom::mapping< char >& e)
    {
      throw ::xsd::cxx::tree::no_namespace_mapping< char > (e.name ());
    }
    catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
    {
      throw ::xsd::cxx::tree::xsi_already_in_use< char > ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const SaveGameXML& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // exploredRooms
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "exploredRooms",
          e));

      s << i.exploredRooms ();
    }

    // freeByblos
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "freeByblos",
          e));

      s << i.freeByblos ();
    }

    // freeEgyptus
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "freeEgyptus",
          e));

      s << i.freeEgyptus ();
    }

    // freePenitentiary
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "freePenitentiary",
          e));

      s << i.freePenitentiary ();
    }

    // freeSafari
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "freeSafari",
          e));

      s << i.freeSafari ();
    }

    // freeBlacktooth
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "freeBlacktooth",
          e));

      s << i.freeBlacktooth ();
    }

    // bonus
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "bonus",
          e));

      s << i.bonus ();
    }

    // players
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "players",
          e));

      s << i.players ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const exploredRooms& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // visited
    //
    for (exploredRooms::visited_const_iterator
         b (i.visited ().begin ()), n (i.visited ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "visited",
          e));

      s << *b;
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const bonus& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // room
    //
    for (bonus::room_const_iterator
         b (i.room ().begin ()), n (i.room ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "room",
          e));

      s << *b;
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const players& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // player
    //
    for (players::player_const_iterator
         b (i.player ().begin ()), n (i.player ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "player",
          e));

      s << *b;
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const visited& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // filename
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "filename",
          e));

      a << i.filename ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const room& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // label
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "label",
          e));

      s << i.label ();
    }

    // filename
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "filename",
          e));

      a << i.filename ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const player& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // active
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "active",
          e));

      s << i.active ();
    }

    // roomFilename
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "roomFilename",
          e));

      s << i.roomFilename ();
    }

    // x
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "x",
          e));

      s << i.x ();
    }

    // y
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "y",
          e));

      s << i.y ();
    }

    // z
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "z",
          e));

      s << i.z ();
    }

    // direction
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "direction",
          e));

      s << i.direction ();
    }

    // entry
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "entry",
          e));

      s << i.entry ();
    }

    // lives
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "lives",
          e));

      s << i.lives ();
    }

    // hasHorn
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "hasHorn",
          e));

      s << i.hasHorn ();
    }

    // hasHandbag
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "hasHandbag",
          e));

      s << i.hasHandbag ();
    }

    // ammo
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "ammo",
          e));

      s << i.ammo ();
    }

    // label
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "label",
          e));

      a << i.label ();
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.


// Copyright (C) 2005-2007 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "MapXML.hpp"

namespace mxml
{
  // MapXML
  // 

  const MapXML::room_sequence& MapXML::
  room () const
  {
    return this->room_;
  }

  MapXML::room_sequence& MapXML::
  room ()
  {
    return this->room_;
  }

  void MapXML::
  room (const room_sequence& room)
  {
    this->room_ = room;
  }


  // room
  // 

  const room::north_optional& room::
  north () const
  {
    return this->north_;
  }

  room::north_optional& room::
  north ()
  {
    return this->north_;
  }

  void room::
  north (const north_type& north)
  {
    this->north_.set (north);
  }

  void room::
  north (const north_optional& north)
  {
    this->north_ = north;
  }

  void room::
  north (::std::auto_ptr< north_type > north)
  {
    this->north_.set (north);
  }

  const room::south_optional& room::
  south () const
  {
    return this->south_;
  }

  room::south_optional& room::
  south ()
  {
    return this->south_;
  }

  void room::
  south (const south_type& south)
  {
    this->south_.set (south);
  }

  void room::
  south (const south_optional& south)
  {
    this->south_ = south;
  }

  void room::
  south (::std::auto_ptr< south_type > south)
  {
    this->south_.set (south);
  }

  const room::east_optional& room::
  east () const
  {
    return this->east_;
  }

  room::east_optional& room::
  east ()
  {
    return this->east_;
  }

  void room::
  east (const east_type& east)
  {
    this->east_.set (east);
  }

  void room::
  east (const east_optional& east)
  {
    this->east_ = east;
  }

  void room::
  east (::std::auto_ptr< east_type > east)
  {
    this->east_.set (east);
  }

  const room::west_optional& room::
  west () const
  {
    return this->west_;
  }

  room::west_optional& room::
  west ()
  {
    return this->west_;
  }

  void room::
  west (const west_type& west)
  {
    this->west_.set (west);
  }

  void room::
  west (const west_optional& west)
  {
    this->west_ = west;
  }

  void room::
  west (::std::auto_ptr< west_type > west)
  {
    this->west_.set (west);
  }

  const room::north_east_optional& room::
  north_east () const
  {
    return this->north_east_;
  }

  room::north_east_optional& room::
  north_east ()
  {
    return this->north_east_;
  }

  void room::
  north_east (const north_east_type& north_east)
  {
    this->north_east_.set (north_east);
  }

  void room::
  north_east (const north_east_optional& north_east)
  {
    this->north_east_ = north_east;
  }

  void room::
  north_east (::std::auto_ptr< north_east_type > north_east)
  {
    this->north_east_.set (north_east);
  }

  const room::north_west_optional& room::
  north_west () const
  {
    return this->north_west_;
  }

  room::north_west_optional& room::
  north_west ()
  {
    return this->north_west_;
  }

  void room::
  north_west (const north_west_type& north_west)
  {
    this->north_west_.set (north_west);
  }

  void room::
  north_west (const north_west_optional& north_west)
  {
    this->north_west_ = north_west;
  }

  void room::
  north_west (::std::auto_ptr< north_west_type > north_west)
  {
    this->north_west_.set (north_west);
  }

  const room::south_east_optional& room::
  south_east () const
  {
    return this->south_east_;
  }

  room::south_east_optional& room::
  south_east ()
  {
    return this->south_east_;
  }

  void room::
  south_east (const south_east_type& south_east)
  {
    this->south_east_.set (south_east);
  }

  void room::
  south_east (const south_east_optional& south_east)
  {
    this->south_east_ = south_east;
  }

  void room::
  south_east (::std::auto_ptr< south_east_type > south_east)
  {
    this->south_east_.set (south_east);
  }

  const room::south_west_optional& room::
  south_west () const
  {
    return this->south_west_;
  }

  room::south_west_optional& room::
  south_west ()
  {
    return this->south_west_;
  }

  void room::
  south_west (const south_west_type& south_west)
  {
    this->south_west_.set (south_west);
  }

  void room::
  south_west (const south_west_optional& south_west)
  {
    this->south_west_ = south_west;
  }

  void room::
  south_west (::std::auto_ptr< south_west_type > south_west)
  {
    this->south_west_.set (south_west);
  }

  const room::east_north_optional& room::
  east_north () const
  {
    return this->east_north_;
  }

  room::east_north_optional& room::
  east_north ()
  {
    return this->east_north_;
  }

  void room::
  east_north (const east_north_type& east_north)
  {
    this->east_north_.set (east_north);
  }

  void room::
  east_north (const east_north_optional& east_north)
  {
    this->east_north_ = east_north;
  }

  void room::
  east_north (::std::auto_ptr< east_north_type > east_north)
  {
    this->east_north_.set (east_north);
  }

  const room::east_south_optional& room::
  east_south () const
  {
    return this->east_south_;
  }

  room::east_south_optional& room::
  east_south ()
  {
    return this->east_south_;
  }

  void room::
  east_south (const east_south_type& east_south)
  {
    this->east_south_.set (east_south);
  }

  void room::
  east_south (const east_south_optional& east_south)
  {
    this->east_south_ = east_south;
  }

  void room::
  east_south (::std::auto_ptr< east_south_type > east_south)
  {
    this->east_south_.set (east_south);
  }

  const room::west_north_optional& room::
  west_north () const
  {
    return this->west_north_;
  }

  room::west_north_optional& room::
  west_north ()
  {
    return this->west_north_;
  }

  void room::
  west_north (const west_north_type& west_north)
  {
    this->west_north_.set (west_north);
  }

  void room::
  west_north (const west_north_optional& west_north)
  {
    this->west_north_ = west_north;
  }

  void room::
  west_north (::std::auto_ptr< west_north_type > west_north)
  {
    this->west_north_.set (west_north);
  }

  const room::west_south_optional& room::
  west_south () const
  {
    return this->west_south_;
  }

  room::west_south_optional& room::
  west_south ()
  {
    return this->west_south_;
  }

  void room::
  west_south (const west_south_type& west_south)
  {
    this->west_south_.set (west_south);
  }

  void room::
  west_south (const west_south_optional& west_south)
  {
    this->west_south_ = west_south;
  }

  void room::
  west_south (::std::auto_ptr< west_south_type > west_south)
  {
    this->west_south_.set (west_south);
  }

  const room::floor_optional& room::
  floor () const
  {
    return this->floor_;
  }

  room::floor_optional& room::
  floor ()
  {
    return this->floor_;
  }

  void room::
  floor (const floor_type& floor)
  {
    this->floor_.set (floor);
  }

  void room::
  floor (const floor_optional& floor)
  {
    this->floor_ = floor;
  }

  void room::
  floor (::std::auto_ptr< floor_type > floor)
  {
    this->floor_.set (floor);
  }

  const room::roof_optional& room::
  roof () const
  {
    return this->roof_;
  }

  room::roof_optional& room::
  roof ()
  {
    return this->roof_;
  }

  void room::
  roof (const roof_type& roof)
  {
    this->roof_.set (roof);
  }

  void room::
  roof (const roof_optional& roof)
  {
    this->roof_ = roof;
  }

  void room::
  roof (::std::auto_ptr< roof_type > roof)
  {
    this->roof_.set (roof);
  }

  const room::teleport_optional& room::
  teleport () const
  {
    return this->teleport_;
  }

  room::teleport_optional& room::
  teleport ()
  {
    return this->teleport_;
  }

  void room::
  teleport (const teleport_type& teleport)
  {
    this->teleport_.set (teleport);
  }

  void room::
  teleport (const teleport_optional& teleport)
  {
    this->teleport_ = teleport;
  }

  void room::
  teleport (::std::auto_ptr< teleport_type > teleport)
  {
    this->teleport_.set (teleport);
  }

  const room::teleport2_optional& room::
  teleport2 () const
  {
    return this->teleport2_;
  }

  room::teleport2_optional& room::
  teleport2 ()
  {
    return this->teleport2_;
  }

  void room::
  teleport2 (const teleport2_type& teleport2)
  {
    this->teleport2_.set (teleport2);
  }

  void room::
  teleport2 (const teleport2_optional& teleport2)
  {
    this->teleport2_ = teleport2;
  }

  void room::
  teleport2 (::std::auto_ptr< teleport2_type > teleport2)
  {
    this->teleport2_.set (teleport2);
  }

  const room::file_type& room::
  file () const
  {
    return this->file_.get ();
  }

  room::file_type& room::
  file ()
  {
    return this->file_.get ();
  }

  void room::
  file (const file_type& file)
  {
    this->file_.set (file);
  }

  void room::
  file (::std::auto_ptr< file_type > file)
  {
    this->file_.set (file);
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace mxml
{
  // MapXML
  //

  MapXML::
  MapXML ()
  : ::xml_schema::type (),
    room_ (::xml_schema::flags (), this)
  {
  }

  MapXML::
  MapXML (const MapXML& x,
          ::xml_schema::flags f,
          ::xml_schema::type* c)
  : ::xml_schema::type (x, f, c),
    room_ (x.room_, f, this)
  {
  }

  MapXML::
  MapXML (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f,
          ::xml_schema::type* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    room_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e);
      this->parse (p, f);
    }
  }

  void MapXML::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // room
      //
      if (n.name () == "room" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< room_type > r (
          room_traits::create (i, f, this));

        this->room ().push_back (r);
        continue;
      }

      break;
    }
  }

  MapXML* MapXML::
  _clone (::xml_schema::flags f,
          ::xml_schema::type* c) const
  {
    return new MapXML (*this, f, c);
  }

  // room
  //

  room::
  room (const file_type& file)
  : ::xml_schema::type (),
    north_ (::xml_schema::flags (), this),
    south_ (::xml_schema::flags (), this),
    east_ (::xml_schema::flags (), this),
    west_ (::xml_schema::flags (), this),
    north_east_ (::xml_schema::flags (), this),
    north_west_ (::xml_schema::flags (), this),
    south_east_ (::xml_schema::flags (), this),
    south_west_ (::xml_schema::flags (), this),
    east_north_ (::xml_schema::flags (), this),
    east_south_ (::xml_schema::flags (), this),
    west_north_ (::xml_schema::flags (), this),
    west_south_ (::xml_schema::flags (), this),
    floor_ (::xml_schema::flags (), this),
    roof_ (::xml_schema::flags (), this),
    teleport_ (::xml_schema::flags (), this),
    teleport2_ (::xml_schema::flags (), this),
    file_ (file, ::xml_schema::flags (), this)
  {
  }

  room::
  room (const room& x,
        ::xml_schema::flags f,
        ::xml_schema::type* c)
  : ::xml_schema::type (x, f, c),
    north_ (x.north_, f, this),
    south_ (x.south_, f, this),
    east_ (x.east_, f, this),
    west_ (x.west_, f, this),
    north_east_ (x.north_east_, f, this),
    north_west_ (x.north_west_, f, this),
    south_east_ (x.south_east_, f, this),
    south_west_ (x.south_west_, f, this),
    east_north_ (x.east_north_, f, this),
    east_south_ (x.east_south_, f, this),
    west_north_ (x.west_north_, f, this),
    west_south_ (x.west_south_, f, this),
    floor_ (x.floor_, f, this),
    roof_ (x.roof_, f, this),
    teleport_ (x.teleport_, f, this),
    teleport2_ (x.teleport2_, f, this),
    file_ (x.file_, f, this)
  {
  }

  room::
  room (const ::xercesc::DOMElement& e,
        ::xml_schema::flags f,
        ::xml_schema::type* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    north_ (f, this),
    south_ (f, this),
    east_ (f, this),
    west_ (f, this),
    north_east_ (f, this),
    north_west_ (f, this),
    south_east_ (f, this),
    south_west_ (f, this),
    east_north_ (f, this),
    east_south_ (f, this),
    west_north_ (f, this),
    west_south_ (f, this),
    floor_ (f, this),
    roof_ (f, this),
    teleport_ (f, this),
    teleport2_ (f, this),
    file_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e);
      this->parse (p, f);
    }
  }

  void room::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // north
      //
      if (n.name () == "north" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< north_type > r (
          north_traits::create (i, f, this));

        if (!this->north ())
        {
          this->north (r);
          continue;
        }
      }

      // south
      //
      if (n.name () == "south" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< south_type > r (
          south_traits::create (i, f, this));

        if (!this->south ())
        {
          this->south (r);
          continue;
        }
      }

      // east
      //
      if (n.name () == "east" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< east_type > r (
          east_traits::create (i, f, this));

        if (!this->east ())
        {
          this->east (r);
          continue;
        }
      }

      // west
      //
      if (n.name () == "west" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< west_type > r (
          west_traits::create (i, f, this));

        if (!this->west ())
        {
          this->west (r);
          continue;
        }
      }

      // north_east
      //
      if (n.name () == "north-east" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< north_east_type > r (
          north_east_traits::create (i, f, this));

        if (!this->north_east ())
        {
          this->north_east (r);
          continue;
        }
      }

      // north_west
      //
      if (n.name () == "north-west" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< north_west_type > r (
          north_west_traits::create (i, f, this));

        if (!this->north_west ())
        {
          this->north_west (r);
          continue;
        }
      }

      // south_east
      //
      if (n.name () == "south-east" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< south_east_type > r (
          south_east_traits::create (i, f, this));

        if (!this->south_east ())
        {
          this->south_east (r);
          continue;
        }
      }

      // south_west
      //
      if (n.name () == "south-west" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< south_west_type > r (
          south_west_traits::create (i, f, this));

        if (!this->south_west ())
        {
          this->south_west (r);
          continue;
        }
      }

      // east_north
      //
      if (n.name () == "east-north" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< east_north_type > r (
          east_north_traits::create (i, f, this));

        if (!this->east_north ())
        {
          this->east_north (r);
          continue;
        }
      }

      // east_south
      //
      if (n.name () == "east-south" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< east_south_type > r (
          east_south_traits::create (i, f, this));

        if (!this->east_south ())
        {
          this->east_south (r);
          continue;
        }
      }

      // west_north
      //
      if (n.name () == "west-north" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< west_north_type > r (
          west_north_traits::create (i, f, this));

        if (!this->west_north ())
        {
          this->west_north (r);
          continue;
        }
      }

      // west_south
      //
      if (n.name () == "west-south" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< west_south_type > r (
          west_south_traits::create (i, f, this));

        if (!this->west_south ())
        {
          this->west_south (r);
          continue;
        }
      }

      // floor
      //
      if (n.name () == "floor" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< floor_type > r (
          floor_traits::create (i, f, this));

        if (!this->floor ())
        {
          this->floor (r);
          continue;
        }
      }

      // roof
      //
      if (n.name () == "roof" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< roof_type > r (
          roof_traits::create (i, f, this));

        if (!this->roof ())
        {
          this->roof (r);
          continue;
        }
      }

      // teleport
      //
      if (n.name () == "teleport" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< teleport_type > r (
          teleport_traits::create (i, f, this));

        if (!this->teleport ())
        {
          this->teleport (r);
          continue;
        }
      }

      // teleport2
      //
      if (n.name () == "teleport2" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< teleport2_type > r (
          teleport2_traits::create (i, f, this));

        if (!this->teleport2 ())
        {
          this->teleport2 (r);
          continue;
        }
      }

      break;
    }

    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "file" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< file_type > r (
          file_traits::create (i, f, this));

        this->file (r);
        continue;
      }
    }

    if (!file_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "file",
        "");
    }
  }

  room* room::
  _clone (::xml_schema::flags f,
          ::xml_schema::type* c) const
  {
    return new room (*this, f, c);
  }
}

#include <istream>
#include <xercesc/framework/Wrapper4InputSource.hpp>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace mxml
{
  ::std::auto_ptr< ::mxml::MapXML >
  map (const ::std::string& u,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::mxml::MapXML > r (
      ::mxml::map (
        d.get (), f | ::xml_schema::flags::own_dom, p));

    if (f & ::xml_schema::flags::keep_dom)
      d.release ();

    return r;
  }

  ::std::auto_ptr< ::mxml::MapXML >
  map (const ::std::string& u,
       ::xml_schema::error_handler& h,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d)
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::mxml::MapXML > r (
      ::mxml::map (
        d.get (), f | ::xml_schema::flags::own_dom, p));

    if (f & ::xml_schema::flags::keep_dom)
      d.release ();

    return r;
  }

  ::std::auto_ptr< ::mxml::MapXML >
  map (const ::std::string& u,
       ::xercesc::DOMErrorHandler& h,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d)
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::mxml::MapXML > r (
      ::mxml::map (
        d.get (), f | ::xml_schema::flags::own_dom, p));

    if (f & ::xml_schema::flags::keep_dom)
      d.release ();

    return r;
  }

  ::std::auto_ptr< ::mxml::MapXML >
  map (::std::istream& is,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    ::xercesc::Wrapper4InputSource wrap (&isrc, false);
    return ::mxml::map (wrap, f, p);
  }

  ::std::auto_ptr< ::mxml::MapXML >
  map (::std::istream& is,
       ::xml_schema::error_handler& h,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    ::xercesc::Wrapper4InputSource wrap (&isrc, false);
    return ::mxml::map (wrap, h, f, p);
  }

  ::std::auto_ptr< ::mxml::MapXML >
  map (::std::istream& is,
       ::xercesc::DOMErrorHandler& h,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    ::xercesc::Wrapper4InputSource wrap (&isrc, false);
    return ::mxml::map (wrap, h, f, p);
  }

  ::std::auto_ptr< ::mxml::MapXML >
  map (::std::istream& is,
       const ::std::string& sid,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    ::xercesc::Wrapper4InputSource wrap (&isrc, false);
    return ::mxml::map (wrap, f, p);
  }

  ::std::auto_ptr< ::mxml::MapXML >
  map (::std::istream& is,
       const ::std::string& sid,
       ::xml_schema::error_handler& h,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    ::xercesc::Wrapper4InputSource wrap (&isrc, false);
    return ::mxml::map (wrap, h, f, p);
  }

  ::std::auto_ptr< ::mxml::MapXML >
  map (::std::istream& is,
       const ::std::string& sid,
       ::xercesc::DOMErrorHandler& h,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    ::xercesc::Wrapper4InputSource wrap (&isrc, false);
    return ::mxml::map (wrap, h, f, p);
  }

  ::std::auto_ptr< ::mxml::MapXML >
  map (const ::xercesc::DOMInputSource& i,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::mxml::MapXML > r (
      ::mxml::map (
        d.get (), f | ::xml_schema::flags::own_dom, p));

    if (f & ::xml_schema::flags::keep_dom)
      d.release ();

    return r;
  }

  ::std::auto_ptr< ::mxml::MapXML >
  map (const ::xercesc::DOMInputSource& i,
       ::xml_schema::error_handler& h,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d)
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::mxml::MapXML > r (
      ::mxml::map (
        d.get (), f | ::xml_schema::flags::own_dom, p));

    if (f & ::xml_schema::flags::keep_dom)
      d.release ();

    return r;
  }

  ::std::auto_ptr< ::mxml::MapXML >
  map (const ::xercesc::DOMInputSource& i,
       ::xercesc::DOMErrorHandler& h,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d)
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::mxml::MapXML > r (
      ::mxml::map (
        d.get (), f | ::xml_schema::flags::own_dom, p));

    if (f & ::xml_schema::flags::keep_dom)
      d.release ();

    return r;
  }

  ::std::auto_ptr< ::mxml::MapXML >
  map (const ::xercesc::DOMDocument& d,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::mxml::MapXML > r (
        ::mxml::map (
          c.get (), f | ::xml_schema::flags::own_dom, p));

      c.release ();
      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "map" &&
        n.namespace_ () == "")
    {
      ::std::auto_ptr< ::mxml::MapXML > r (
        ::xsd::cxx::tree::traits< ::mxml::MapXML, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "map",
      "");
  }

  ::std::auto_ptr< ::mxml::MapXML >
  map (::xercesc::DOMDocument* d,
       ::xml_schema::flags f,
       const ::xml_schema::properties&)
  {
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    const ::xercesc::DOMElement& e (
      c.get ()
      ? *c->getDocumentElement ()
      : *d->getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "map" &&
        n.namespace_ () == "")
    {
      ::std::auto_ptr< ::mxml::MapXML > r (
        ::xsd::cxx::tree::traits< ::mxml::MapXML, char >::create (
          e, f, 0));
      c.release ();
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "map",
      "");
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.


// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "LanguageXML.hpp"

namespace lxml
{
  // LanguageXML
  // 

  const LanguageXML::text_sequence& LanguageXML::
  text () const
  {
    return this->text_;
  }

  LanguageXML::text_sequence& LanguageXML::
  text ()
  {
    return this->text_;
  }

  void LanguageXML::
  text (const text_sequence& s)
  {
    this->text_ = s;
  }


  // text
  // 

  const text::properties_sequence& text::
  properties () const
  {
    return this->properties_;
  }

  text::properties_sequence& text::
  properties ()
  {
    return this->properties_;
  }

  void text::
  properties (const properties_sequence& s)
  {
    this->properties_ = s;
  }

  const text::id_type& text::
  id () const
  {
    return this->id_.get ();
  }

  text::id_type& text::
  id ()
  {
    return this->id_.get ();
  }

  void text::
  id (const id_type& x)
  {
    this->id_.set (x);
  }

  void text::
  id (::std::auto_ptr< id_type > x)
  {
    this->id_.set (x);
  }

  const text::x_type& text::
  x () const
  {
    return this->x_.get ();
  }

  text::x_type& text::
  x ()
  {
    return this->x_.get ();
  }

  void text::
  x (const x_type& x)
  {
    this->x_.set (x);
  }

  const text::y_type& text::
  y () const
  {
    return this->y_.get ();
  }

  text::y_type& text::
  y ()
  {
    return this->y_.get ();
  }

  void text::
  y (const y_type& x)
  {
    this->y_.set (x);
  }


  // properties
  // 

  const properties::ustring_sequence& properties::
  ustring () const
  {
    return this->ustring_;
  }

  properties::ustring_sequence& properties::
  ustring ()
  {
    return this->ustring_;
  }

  void properties::
  ustring (const ustring_sequence& s)
  {
    this->ustring_ = s;
  }

  const properties::font_optional& properties::
  font () const
  {
    return this->font_;
  }

  properties::font_optional& properties::
  font ()
  {
    return this->font_;
  }

  void properties::
  font (const font_type& x)
  {
    this->font_.set (x);
  }

  void properties::
  font (const font_optional& x)
  {
    this->font_ = x;
  }

  void properties::
  font (::std::auto_ptr< font_type > x)
  {
    this->font_.set (x);
  }

  const properties::color_optional& properties::
  color () const
  {
    return this->color_;
  }

  properties::color_optional& properties::
  color ()
  {
    return this->color_;
  }

  void properties::
  color (const color_type& x)
  {
    this->color_.set (x);
  }

  void properties::
  color (const color_optional& x)
  {
    this->color_ = x;
  }

  void properties::
  color (::std::auto_ptr< color_type > x)
  {
    this->color_.set (x);
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace lxml
{
  // LanguageXML
  //

  LanguageXML::
  LanguageXML ()
  : ::xml_schema::type (),
    text_ (this)
  {
  }

  LanguageXML::
  LanguageXML (const LanguageXML& x,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    text_ (x.text_, f, this)
  {
  }

  LanguageXML::
  LanguageXML (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    text_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void LanguageXML::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // text
      //
      if (n.name () == "text" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< text_type > r (
          text_traits::create (i, f, this));

        this->text_.push_back (r);
        continue;
      }

      break;
    }
  }

  LanguageXML* LanguageXML::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class LanguageXML (*this, f, c);
  }

  LanguageXML& LanguageXML::
  operator= (const LanguageXML& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::type& > (*this) = x;
      this->text_ = x.text_;
    }

    return *this;
  }

  LanguageXML::
  ~LanguageXML ()
  {
  }

  // text
  //

  text::
  text (const id_type& id,
        const x_type& x,
        const y_type& y)
  : ::xml_schema::type (),
    properties_ (this),
    id_ (id, this),
    x_ (x, this),
    y_ (y, this)
  {
  }

  text::
  text (const text& x,
        ::xml_schema::flags f,
        ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    properties_ (x.properties_, f, this),
    id_ (x.id_, f, this),
    x_ (x.x_, f, this),
    y_ (x.y_, f, this)
  {
  }

  text::
  text (const ::xercesc::DOMElement& e,
        ::xml_schema::flags f,
        ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    properties_ (this),
    id_ (this),
    x_ (this),
    y_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
      this->parse (p, f);
    }
  }

  void text::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // properties
      //
      if (n.name () == "properties" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< properties_type > r (
          properties_traits::create (i, f, this));

        this->properties_.push_back (r);
        continue;
      }

      break;
    }

    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "id" && n.namespace_ ().empty ())
      {
        this->id_.set (id_traits::create (i, f, this));
        continue;
      }

      if (n.name () == "x" && n.namespace_ ().empty ())
      {
        this->x_.set (x_traits::create (i, f, this));
        continue;
      }

      if (n.name () == "y" && n.namespace_ ().empty ())
      {
        this->y_.set (y_traits::create (i, f, this));
        continue;
      }
    }

    if (!id_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "id",
        "");
    }

    if (!x_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "x",
        "");
    }

    if (!y_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "y",
        "");
    }
  }

  text* text::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class text (*this, f, c);
  }

  text& text::
  operator= (const text& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::type& > (*this) = x;
      this->properties_ = x.properties_;
      this->id_ = x.id_;
      this->x_ = x.x_;
      this->y_ = x.y_;
    }

    return *this;
  }

  text::
  ~text ()
  {
  }

  // properties
  //

  properties::
  properties ()
  : ::xml_schema::type (),
    ustring_ (this),
    font_ (this),
    color_ (this)
  {
  }

  properties::
  properties (const properties& x,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    ustring_ (x.ustring_, f, this),
    font_ (x.font_, f, this),
    color_ (x.color_, f, this)
  {
  }

  properties::
  properties (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    ustring_ (this),
    font_ (this),
    color_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
      this->parse (p, f);
    }
  }

  void properties::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // ustring
      //
      if (n.name () == "ustring" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< ustring_type > r (
          ustring_traits::create (i, f, this));

        this->ustring_.push_back (r);
        continue;
      }

      break;
    }

    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "font" && n.namespace_ ().empty ())
      {
        this->font_.set (font_traits::create (i, f, this));
        continue;
      }

      if (n.name () == "color" && n.namespace_ ().empty ())
      {
        this->color_.set (color_traits::create (i, f, this));
        continue;
      }
    }
  }

  properties* properties::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class properties (*this, f, c);
  }

  properties& properties::
  operator= (const properties& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::type& > (*this) = x;
      this->ustring_ = x.ustring_;
      this->font_ = x.font_;
      this->color_ = x.color_;
    }

    return *this;
  }

  properties::
  ~properties ()
  {
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace lxml
{
  ::std::auto_ptr< ::lxml::LanguageXML >
  language (const ::std::string& u,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::auto_ptr< ::lxml::LanguageXML > (
      ::lxml::language (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::lxml::LanguageXML >
  language (const ::std::string& u,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::lxml::LanguageXML > (
      ::lxml::language (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::lxml::LanguageXML >
  language (const ::std::string& u,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::lxml::LanguageXML > (
      ::lxml::language (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::lxml::LanguageXML >
  language (::std::istream& is,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::lxml::language (isrc, f, p);
  }

  ::std::auto_ptr< ::lxml::LanguageXML >
  language (::std::istream& is,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::lxml::language (isrc, h, f, p);
  }

  ::std::auto_ptr< ::lxml::LanguageXML >
  language (::std::istream& is,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::lxml::language (isrc, h, f, p);
  }

  ::std::auto_ptr< ::lxml::LanguageXML >
  language (::std::istream& is,
            const ::std::string& sid,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::lxml::language (isrc, f, p);
  }

  ::std::auto_ptr< ::lxml::LanguageXML >
  language (::std::istream& is,
            const ::std::string& sid,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::lxml::language (isrc, h, f, p);
  }

  ::std::auto_ptr< ::lxml::LanguageXML >
  language (::std::istream& is,
            const ::std::string& sid,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::lxml::language (isrc, h, f, p);
  }

  ::std::auto_ptr< ::lxml::LanguageXML >
  language (::xercesc::InputSource& i,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::auto_ptr< ::lxml::LanguageXML > (
      ::lxml::language (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::lxml::LanguageXML >
  language (::xercesc::InputSource& i,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::lxml::LanguageXML > (
      ::lxml::language (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::lxml::LanguageXML >
  language (::xercesc::InputSource& i,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::lxml::LanguageXML > (
      ::lxml::language (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::lxml::LanguageXML >
  language (const ::xercesc::DOMDocument& doc,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

      return ::std::auto_ptr< ::lxml::LanguageXML > (
        ::lxml::language (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "language" &&
        n.namespace_ () == "")
    {
      ::std::auto_ptr< ::lxml::LanguageXML > r (
        ::xsd::cxx::tree::traits< ::lxml::LanguageXML, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "language",
      "");
  }

  ::std::auto_ptr< ::lxml::LanguageXML >
  language (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
            ::xml_schema::flags f,
            const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "language" &&
        n.namespace_ () == "")
    {
      ::std::auto_ptr< ::lxml::LanguageXML > r (
        ::xsd::cxx::tree::traits< ::lxml::LanguageXML, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "language",
      "");
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

namespace lxml
{
  void
  language (::std::ostream& o,
            const ::lxml::LanguageXML& s,
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e,
            ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::lxml::language (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  language (::std::ostream& o,
            const ::lxml::LanguageXML& s,
            ::xml_schema::error_handler& h,
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e,
            ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::lxml::language (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  language (::std::ostream& o,
            const ::lxml::LanguageXML& s,
            ::xercesc::DOMErrorHandler& h,
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e,
            ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::lxml::language (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  language (::xercesc::XMLFormatTarget& t,
            const ::lxml::LanguageXML& s,
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e,
            ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::lxml::language (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  language (::xercesc::XMLFormatTarget& t,
            const ::lxml::LanguageXML& s,
            ::xml_schema::error_handler& h,
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e,
            ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::lxml::language (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  language (::xercesc::XMLFormatTarget& t,
            const ::lxml::LanguageXML& s,
            ::xercesc::DOMErrorHandler& h,
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e,
            ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::lxml::language (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  language (::xercesc::DOMDocument& d,
            const ::lxml::LanguageXML& s,
            ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "language" &&
        n.namespace_ () == "")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "language",
        "");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  language (const ::lxml::LanguageXML& s,
            const ::xml_schema::namespace_infomap& m,
            ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "language",
        "",
        m, f));

    ::lxml::language (*d, s, f);
    return d;
  }

  void
  operator<< (::xercesc::DOMElement& e, const LanguageXML& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // text
    //
    for (LanguageXML::text_const_iterator
         b (i.text ().begin ()), n (i.text ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "text",
          e));

      s << *b;
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const text& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // properties
    //
    for (text::properties_const_iterator
         b (i.properties ().begin ()), n (i.properties ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "properties",
          e));

      s << *b;
    }

    // id
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "id",
          e));

      a << i.id ();
    }

    // x
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "x",
          e));

      a << i.x ();
    }

    // y
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "y",
          e));

      a << i.y ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const properties& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // ustring
    //
    for (properties::ustring_const_iterator
         b (i.ustring ().begin ()), n (i.ustring ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "ustring",
          e));

      s << *b;
    }

    // font
    //
    if (i.font ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "font",
          e));

      a << *i.font ();
    }

    // color
    //
    if (i.color ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "color",
          e));

      a << *i.color ();
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.


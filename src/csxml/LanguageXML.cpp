// Copyright (C) 2005-2007 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "LanguageXML.hpp"

namespace lxml
{
  // LanguageXML
  // 

  const LanguageXML::text_sequence& LanguageXML::
  text () const
  {
    return this->text_;
  }

  LanguageXML::text_sequence& LanguageXML::
  text ()
  {
    return this->text_;
  }

  void LanguageXML::
  text (const text_sequence& text)
  {
    this->text_ = text;
  }


  // text
  // 

  const text::properties_sequence& text::
  properties () const
  {
    return this->properties_;
  }

  text::properties_sequence& text::
  properties ()
  {
    return this->properties_;
  }

  void text::
  properties (const properties_sequence& properties)
  {
    this->properties_ = properties;
  }

  const text::id_type& text::
  id () const
  {
    return this->id_.get ();
  }

  text::id_type& text::
  id ()
  {
    return this->id_.get ();
  }

  void text::
  id (const id_type& id)
  {
    this->id_.set (id);
  }

  void text::
  id (::std::auto_ptr< id_type > id)
  {
    this->id_.set (id);
  }

  const text::x_type& text::
  x () const
  {
    return this->x_.get ();
  }

  text::x_type& text::
  x ()
  {
    return this->x_.get ();
  }

  void text::
  x (const x_type& x)
  {
    this->x_.set (x);
  }

  const text::y_type& text::
  y () const
  {
    return this->y_.get ();
  }

  text::y_type& text::
  y ()
  {
    return this->y_.get ();
  }

  void text::
  y (const y_type& y)
  {
    this->y_.set (y);
  }


  // properties
  // 

  const properties::ustring_sequence& properties::
  ustring () const
  {
    return this->ustring_;
  }

  properties::ustring_sequence& properties::
  ustring ()
  {
    return this->ustring_;
  }

  void properties::
  ustring (const ustring_sequence& ustring)
  {
    this->ustring_ = ustring;
  }

  const properties::font_optional& properties::
  font () const
  {
    return this->font_;
  }

  properties::font_optional& properties::
  font ()
  {
    return this->font_;
  }

  void properties::
  font (const font_type& font)
  {
    this->font_.set (font);
  }

  void properties::
  font (const font_optional& font)
  {
    this->font_ = font;
  }

  void properties::
  font (::std::auto_ptr< font_type > font)
  {
    this->font_.set (font);
  }

  const properties::color_optional& properties::
  color () const
  {
    return this->color_;
  }

  properties::color_optional& properties::
  color ()
  {
    return this->color_;
  }

  void properties::
  color (const color_type& color)
  {
    this->color_.set (color);
  }

  void properties::
  color (const color_optional& color)
  {
    this->color_ = color;
  }

  void properties::
  color (::std::auto_ptr< color_type > color)
  {
    this->color_.set (color);
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace lxml
{
  // LanguageXML
  //

  LanguageXML::
  LanguageXML ()
  : ::xml_schema::type (),
    text_ (::xml_schema::flags (), this)
  {
  }

  LanguageXML::
  LanguageXML (const LanguageXML& x,
               ::xml_schema::flags f,
               ::xml_schema::type* c)
  : ::xml_schema::type (x, f, c),
    text_ (x.text_, f, this)
  {
  }

  LanguageXML::
  LanguageXML (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f,
               ::xml_schema::type* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    text_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e);
      this->parse (p, f);
    }
  }

  void LanguageXML::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // text
      //
      if (n.name () == "text" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< text_type > r (
          text_traits::create (i, f, this));

        this->text ().push_back (r);
        continue;
      }

      break;
    }
  }

  LanguageXML* LanguageXML::
  _clone (::xml_schema::flags f,
          ::xml_schema::type* c) const
  {
    return new LanguageXML (*this, f, c);
  }

  // text
  //

  text::
  text (const id_type& id,
        const x_type& x,
        const y_type& y)
  : ::xml_schema::type (),
    properties_ (::xml_schema::flags (), this),
    id_ (id, ::xml_schema::flags (), this),
    x_ (x, ::xml_schema::flags (), this),
    y_ (y, ::xml_schema::flags (), this)
  {
  }

  text::
  text (const text& x,
        ::xml_schema::flags f,
        ::xml_schema::type* c)
  : ::xml_schema::type (x, f, c),
    properties_ (x.properties_, f, this),
    id_ (x.id_, f, this),
    x_ (x.x_, f, this),
    y_ (x.y_, f, this)
  {
  }

  text::
  text (const ::xercesc::DOMElement& e,
        ::xml_schema::flags f,
        ::xml_schema::type* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    properties_ (f, this),
    id_ (f, this),
    x_ (f, this),
    y_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e);
      this->parse (p, f);
    }
  }

  void text::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // properties
      //
      if (n.name () == "properties" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< properties_type > r (
          properties_traits::create (i, f, this));

        this->properties ().push_back (r);
        continue;
      }

      break;
    }

    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "id" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< id_type > r (
          id_traits::create (i, f, this));

        this->id (r);
        continue;
      }

      if (n.name () == "x" && n.namespace_ ().empty ())
      {
        this->x (x_traits::create (i, f, this));
        continue;
      }

      if (n.name () == "y" && n.namespace_ ().empty ())
      {
        this->y (y_traits::create (i, f, this));
        continue;
      }
    }

    if (!id_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "id",
        "");
    }

    if (!x_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "x",
        "");
    }

    if (!y_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "y",
        "");
    }
  }

  text* text::
  _clone (::xml_schema::flags f,
          ::xml_schema::type* c) const
  {
    return new text (*this, f, c);
  }

  // properties
  //

  properties::
  properties ()
  : ::xml_schema::type (),
    ustring_ (::xml_schema::flags (), this),
    font_ (::xml_schema::flags (), this),
    color_ (::xml_schema::flags (), this)
  {
  }

  properties::
  properties (const properties& x,
              ::xml_schema::flags f,
              ::xml_schema::type* c)
  : ::xml_schema::type (x, f, c),
    ustring_ (x.ustring_, f, this),
    font_ (x.font_, f, this),
    color_ (x.color_, f, this)
  {
  }

  properties::
  properties (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f,
              ::xml_schema::type* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    ustring_ (f, this),
    font_ (f, this),
    color_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e);
      this->parse (p, f);
    }
  }

  void properties::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // ustring
      //
      if (n.name () == "ustring" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< ustring_type > r (
          ustring_traits::create (i, f, this));

        this->ustring ().push_back (r);
        continue;
      }

      break;
    }

    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "font" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< font_type > r (
          font_traits::create (i, f, this));

        this->font (r);
        continue;
      }

      if (n.name () == "color" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< color_type > r (
          color_traits::create (i, f, this));

        this->color (r);
        continue;
      }
    }
  }

  properties* properties::
  _clone (::xml_schema::flags f,
          ::xml_schema::type* c) const
  {
    return new properties (*this, f, c);
  }
}

#include <istream>
#include <xercesc/framework/Wrapper4InputSource.hpp>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace lxml
{
  ::std::auto_ptr< ::lxml::LanguageXML >
  language (const ::std::string& u,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::lxml::LanguageXML > r (
      ::lxml::language (
        d.get (), f | ::xml_schema::flags::own_dom, p));

    if (f & ::xml_schema::flags::keep_dom)
      d.release ();

    return r;
  }

  ::std::auto_ptr< ::lxml::LanguageXML >
  language (const ::std::string& u,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d)
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::lxml::LanguageXML > r (
      ::lxml::language (
        d.get (), f | ::xml_schema::flags::own_dom, p));

    if (f & ::xml_schema::flags::keep_dom)
      d.release ();

    return r;
  }

  ::std::auto_ptr< ::lxml::LanguageXML >
  language (const ::std::string& u,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d)
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::lxml::LanguageXML > r (
      ::lxml::language (
        d.get (), f | ::xml_schema::flags::own_dom, p));

    if (f & ::xml_schema::flags::keep_dom)
      d.release ();

    return r;
  }

  ::std::auto_ptr< ::lxml::LanguageXML >
  language (::std::istream& is,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    ::xercesc::Wrapper4InputSource wrap (&isrc, false);
    return ::lxml::language (wrap, f, p);
  }

  ::std::auto_ptr< ::lxml::LanguageXML >
  language (::std::istream& is,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    ::xercesc::Wrapper4InputSource wrap (&isrc, false);
    return ::lxml::language (wrap, h, f, p);
  }

  ::std::auto_ptr< ::lxml::LanguageXML >
  language (::std::istream& is,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    ::xercesc::Wrapper4InputSource wrap (&isrc, false);
    return ::lxml::language (wrap, h, f, p);
  }

  ::std::auto_ptr< ::lxml::LanguageXML >
  language (::std::istream& is,
            const ::std::string& sid,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    ::xercesc::Wrapper4InputSource wrap (&isrc, false);
    return ::lxml::language (wrap, f, p);
  }

  ::std::auto_ptr< ::lxml::LanguageXML >
  language (::std::istream& is,
            const ::std::string& sid,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    ::xercesc::Wrapper4InputSource wrap (&isrc, false);
    return ::lxml::language (wrap, h, f, p);
  }

  ::std::auto_ptr< ::lxml::LanguageXML >
  language (::std::istream& is,
            const ::std::string& sid,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    ::xercesc::Wrapper4InputSource wrap (&isrc, false);
    return ::lxml::language (wrap, h, f, p);
  }

  ::std::auto_ptr< ::lxml::LanguageXML >
  language (const ::xercesc::DOMInputSource& i,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::lxml::LanguageXML > r (
      ::lxml::language (
        d.get (), f | ::xml_schema::flags::own_dom, p));

    if (f & ::xml_schema::flags::keep_dom)
      d.release ();

    return r;
  }

  ::std::auto_ptr< ::lxml::LanguageXML >
  language (const ::xercesc::DOMInputSource& i,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d)
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::lxml::LanguageXML > r (
      ::lxml::language (
        d.get (), f | ::xml_schema::flags::own_dom, p));

    if (f & ::xml_schema::flags::keep_dom)
      d.release ();

    return r;
  }

  ::std::auto_ptr< ::lxml::LanguageXML >
  language (const ::xercesc::DOMInputSource& i,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d)
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::lxml::LanguageXML > r (
      ::lxml::language (
        d.get (), f | ::xml_schema::flags::own_dom, p));

    if (f & ::xml_schema::flags::keep_dom)
      d.release ();

    return r;
  }

  ::std::auto_ptr< ::lxml::LanguageXML >
  language (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::lxml::LanguageXML > r (
        ::lxml::language (
          c.get (), f | ::xml_schema::flags::own_dom, p));

      c.release ();
      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "language" &&
        n.namespace_ () == "")
    {
      ::std::auto_ptr< ::lxml::LanguageXML > r (
        ::xsd::cxx::tree::traits< ::lxml::LanguageXML, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "language",
      "");
  }

  ::std::auto_ptr< ::lxml::LanguageXML >
  language (::xercesc::DOMDocument* d,
            ::xml_schema::flags f,
            const ::xml_schema::properties&)
  {
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    const ::xercesc::DOMElement& e (
      c.get ()
      ? *c->getDocumentElement ()
      : *d->getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "language" &&
        n.namespace_ () == "")
    {
      ::std::auto_ptr< ::lxml::LanguageXML > r (
        ::xsd::cxx::tree::traits< ::lxml::LanguageXML, char >::create (
          e, f, 0));
      c.release ();
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "language",
      "");
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.


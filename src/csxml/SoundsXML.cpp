// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SoundsXML.hpp"

namespace sxml
{
  // SoundsXML
  // 

  const SoundsXML::item_sequence& SoundsXML::
  item () const
  {
    return this->item_;
  }

  SoundsXML::item_sequence& SoundsXML::
  item ()
  {
    return this->item_;
  }

  void SoundsXML::
  item (const item_sequence& s)
  {
    this->item_ = s;
  }


  // item
  // 

  const item::state_sequence& item::
  state () const
  {
    return this->state_;
  }

  item::state_sequence& item::
  state ()
  {
    return this->state_;
  }

  void item::
  state (const state_sequence& s)
  {
    this->state_ = s;
  }

  const item::label_type& item::
  label () const
  {
    return this->label_.get ();
  }

  item::label_type& item::
  label ()
  {
    return this->label_.get ();
  }

  void item::
  label (const label_type& x)
  {
    this->label_.set (x);
  }


  // state
  // 

  const state::file_type& state::
  file () const
  {
    return this->file_.get ();
  }

  state::file_type& state::
  file ()
  {
    return this->file_.get ();
  }

  void state::
  file (const file_type& x)
  {
    this->file_.set (x);
  }

  void state::
  file (::std::auto_ptr< file_type > x)
  {
    this->file_.set (x);
  }

  const state::id_type& state::
  id () const
  {
    return this->id_.get ();
  }

  state::id_type& state::
  id ()
  {
    return this->id_.get ();
  }

  void state::
  id (const id_type& x)
  {
    this->id_.set (x);
  }

  void state::
  id (::std::auto_ptr< id_type > x)
  {
    this->id_.set (x);
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace sxml
{
  // SoundsXML
  //

  SoundsXML::
  SoundsXML ()
  : ::xml_schema::type (),
    item_ (this)
  {
  }

  SoundsXML::
  SoundsXML (const SoundsXML& x,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    item_ (x.item_, f, this)
  {
  }

  SoundsXML::
  SoundsXML (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    item_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void SoundsXML::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // item
      //
      if (n.name () == "item" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< item_type > r (
          item_traits::create (i, f, this));

        this->item_.push_back (r);
        continue;
      }

      break;
    }
  }

  SoundsXML* SoundsXML::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class SoundsXML (*this, f, c);
  }

  SoundsXML& SoundsXML::
  operator= (const SoundsXML& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::type& > (*this) = x;
      this->item_ = x.item_;
    }

    return *this;
  }

  SoundsXML::
  ~SoundsXML ()
  {
  }

  // item
  //

  item::
  item (const label_type& label)
  : ::xml_schema::type (),
    state_ (this),
    label_ (label, this)
  {
  }

  item::
  item (const item& x,
        ::xml_schema::flags f,
        ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    state_ (x.state_, f, this),
    label_ (x.label_, f, this)
  {
  }

  item::
  item (const ::xercesc::DOMElement& e,
        ::xml_schema::flags f,
        ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    state_ (this),
    label_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
      this->parse (p, f);
    }
  }

  void item::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // state
      //
      if (n.name () == "state" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< state_type > r (
          state_traits::create (i, f, this));

        this->state_.push_back (r);
        continue;
      }

      break;
    }

    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "label" && n.namespace_ ().empty ())
      {
        this->label_.set (label_traits::create (i, f, this));
        continue;
      }
    }

    if (!label_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "label",
        "");
    }
  }

  item* item::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class item (*this, f, c);
  }

  item& item::
  operator= (const item& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::type& > (*this) = x;
      this->state_ = x.state_;
      this->label_ = x.label_;
    }

    return *this;
  }

  item::
  ~item ()
  {
  }

  // state
  //

  state::
  state (const file_type& file,
         const id_type& id)
  : ::xml_schema::type (),
    file_ (file, this),
    id_ (id, this)
  {
  }

  state::
  state (const state& x,
         ::xml_schema::flags f,
         ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    file_ (x.file_, f, this),
    id_ (x.id_, f, this)
  {
  }

  state::
  state (const ::xercesc::DOMElement& e,
         ::xml_schema::flags f,
         ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    file_ (this),
    id_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
      this->parse (p, f);
    }
  }

  void state::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // file
      //
      if (n.name () == "file" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< file_type > r (
          file_traits::create (i, f, this));

        if (!file_.present ())
        {
          this->file_.set (r);
          continue;
        }
      }

      break;
    }

    if (!file_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "file",
        "");
    }

    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "id" && n.namespace_ ().empty ())
      {
        this->id_.set (id_traits::create (i, f, this));
        continue;
      }
    }

    if (!id_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "id",
        "");
    }
  }

  state* state::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class state (*this, f, c);
  }

  state& state::
  operator= (const state& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::type& > (*this) = x;
      this->file_ = x.file_;
      this->id_ = x.id_;
    }

    return *this;
  }

  state::
  ~state ()
  {
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace sxml
{
  ::std::auto_ptr< ::sxml::SoundsXML >
  sounds (const ::std::string& u,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::auto_ptr< ::sxml::SoundsXML > (
      ::sxml::sounds (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::sxml::SoundsXML >
  sounds (const ::std::string& u,
          ::xml_schema::error_handler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::sxml::SoundsXML > (
      ::sxml::sounds (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::sxml::SoundsXML >
  sounds (const ::std::string& u,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::sxml::SoundsXML > (
      ::sxml::sounds (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::sxml::SoundsXML >
  sounds (::std::istream& is,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::sxml::sounds (isrc, f, p);
  }

  ::std::auto_ptr< ::sxml::SoundsXML >
  sounds (::std::istream& is,
          ::xml_schema::error_handler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::sxml::sounds (isrc, h, f, p);
  }

  ::std::auto_ptr< ::sxml::SoundsXML >
  sounds (::std::istream& is,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::sxml::sounds (isrc, h, f, p);
  }

  ::std::auto_ptr< ::sxml::SoundsXML >
  sounds (::std::istream& is,
          const ::std::string& sid,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::sxml::sounds (isrc, f, p);
  }

  ::std::auto_ptr< ::sxml::SoundsXML >
  sounds (::std::istream& is,
          const ::std::string& sid,
          ::xml_schema::error_handler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::sxml::sounds (isrc, h, f, p);
  }

  ::std::auto_ptr< ::sxml::SoundsXML >
  sounds (::std::istream& is,
          const ::std::string& sid,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::sxml::sounds (isrc, h, f, p);
  }

  ::std::auto_ptr< ::sxml::SoundsXML >
  sounds (::xercesc::InputSource& i,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::auto_ptr< ::sxml::SoundsXML > (
      ::sxml::sounds (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::sxml::SoundsXML >
  sounds (::xercesc::InputSource& i,
          ::xml_schema::error_handler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::sxml::SoundsXML > (
      ::sxml::sounds (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::sxml::SoundsXML >
  sounds (::xercesc::InputSource& i,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::sxml::SoundsXML > (
      ::sxml::sounds (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::sxml::SoundsXML >
  sounds (const ::xercesc::DOMDocument& doc,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

      return ::std::auto_ptr< ::sxml::SoundsXML > (
        ::sxml::sounds (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "sounds" &&
        n.namespace_ () == "")
    {
      ::std::auto_ptr< ::sxml::SoundsXML > r (
        ::xsd::cxx::tree::traits< ::sxml::SoundsXML, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "sounds",
      "");
  }

  ::std::auto_ptr< ::sxml::SoundsXML >
  sounds (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
          ::xml_schema::flags f,
          const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "sounds" &&
        n.namespace_ () == "")
    {
      ::std::auto_ptr< ::sxml::SoundsXML > r (
        ::xsd::cxx::tree::traits< ::sxml::SoundsXML, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "sounds",
      "");
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

namespace sxml
{
  void
  sounds (::std::ostream& o,
          const ::sxml::SoundsXML& s,
          const ::xml_schema::namespace_infomap& m,
          const ::std::string& e,
          ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::sxml::sounds (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  sounds (::std::ostream& o,
          const ::sxml::SoundsXML& s,
          ::xml_schema::error_handler& h,
          const ::xml_schema::namespace_infomap& m,
          const ::std::string& e,
          ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::sxml::sounds (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  sounds (::std::ostream& o,
          const ::sxml::SoundsXML& s,
          ::xercesc::DOMErrorHandler& h,
          const ::xml_schema::namespace_infomap& m,
          const ::std::string& e,
          ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::sxml::sounds (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  sounds (::xercesc::XMLFormatTarget& t,
          const ::sxml::SoundsXML& s,
          const ::xml_schema::namespace_infomap& m,
          const ::std::string& e,
          ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::sxml::sounds (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  sounds (::xercesc::XMLFormatTarget& t,
          const ::sxml::SoundsXML& s,
          ::xml_schema::error_handler& h,
          const ::xml_schema::namespace_infomap& m,
          const ::std::string& e,
          ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::sxml::sounds (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  sounds (::xercesc::XMLFormatTarget& t,
          const ::sxml::SoundsXML& s,
          ::xercesc::DOMErrorHandler& h,
          const ::xml_schema::namespace_infomap& m,
          const ::std::string& e,
          ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::sxml::sounds (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  sounds (::xercesc::DOMDocument& d,
          const ::sxml::SoundsXML& s,
          ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "sounds" &&
        n.namespace_ () == "")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "sounds",
        "");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  sounds (const ::sxml::SoundsXML& s,
          const ::xml_schema::namespace_infomap& m,
          ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "sounds",
        "",
        m, f));

    ::sxml::sounds (*d, s, f);
    return d;
  }

  void
  operator<< (::xercesc::DOMElement& e, const SoundsXML& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // item
    //
    for (SoundsXML::item_const_iterator
         b (i.item ().begin ()), n (i.item ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "item",
          e));

      s << *b;
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const item& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // state
    //
    for (item::state_const_iterator
         b (i.state ().begin ()), n (i.state ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "state",
          e));

      s << *b;
    }

    // label
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "label",
          e));

      a << i.label ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const state& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // file
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "file",
          e));

      s << i.file ();
    }

    // id
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "id",
          e));

      a << i.id ();
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.


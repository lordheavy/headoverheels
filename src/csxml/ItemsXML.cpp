// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "ItemsXML.hpp"

namespace ixml
{
  // ItemsXML
  // 

  const ItemsXML::item_sequence& ItemsXML::
  item () const
  {
    return this->item_;
  }

  ItemsXML::item_sequence& ItemsXML::
  item ()
  {
    return this->item_;
  }

  void ItemsXML::
  item (const item_sequence& s)
  {
    this->item_ = s;
  }


  // item
  // 

  const item::door_optional& item::
  door () const
  {
    return this->door_;
  }

  item::door_optional& item::
  door ()
  {
    return this->door_;
  }

  void item::
  door (const door_type& x)
  {
    this->door_.set (x);
  }

  void item::
  door (const door_optional& x)
  {
    this->door_ = x;
  }

  void item::
  door (::std::auto_ptr< door_type > x)
  {
    this->door_.set (x);
  }

  const item::widthX_sequence& item::
  widthX () const
  {
    return this->widthX_;
  }

  item::widthX_sequence& item::
  widthX ()
  {
    return this->widthX_;
  }

  void item::
  widthX (const widthX_sequence& s)
  {
    this->widthX_ = s;
  }

  const item::widthY_sequence& item::
  widthY () const
  {
    return this->widthY_;
  }

  item::widthY_sequence& item::
  widthY ()
  {
    return this->widthY_;
  }

  void item::
  widthY (const widthY_sequence& s)
  {
    this->widthY_ = s;
  }

  const item::height_sequence& item::
  height () const
  {
    return this->height_;
  }

  item::height_sequence& item::
  height ()
  {
    return this->height_;
  }

  void item::
  height (const height_sequence& s)
  {
    this->height_ = s;
  }

  const item::directionFrames_type& item::
  directionFrames () const
  {
    return this->directionFrames_.get ();
  }

  item::directionFrames_type& item::
  directionFrames ()
  {
    return this->directionFrames_.get ();
  }

  void item::
  directionFrames (const directionFrames_type& x)
  {
    this->directionFrames_.set (x);
  }

  const item::mortal_type& item::
  mortal () const
  {
    return this->mortal_.get ();
  }

  item::mortal_type& item::
  mortal ()
  {
    return this->mortal_.get ();
  }

  void item::
  mortal (const mortal_type& x)
  {
    this->mortal_.set (x);
  }

  const item::weight_type& item::
  weight () const
  {
    return this->weight_.get ();
  }

  item::weight_type& item::
  weight ()
  {
    return this->weight_.get ();
  }

  void item::
  weight (const weight_type& x)
  {
    this->weight_.set (x);
  }

  const item::framesDelay_type& item::
  framesDelay () const
  {
    return this->framesDelay_.get ();
  }

  item::framesDelay_type& item::
  framesDelay ()
  {
    return this->framesDelay_.get ();
  }

  void item::
  framesDelay (const framesDelay_type& x)
  {
    this->framesDelay_.set (x);
  }

  const item::speed_type& item::
  speed () const
  {
    return this->speed_.get ();
  }

  item::speed_type& item::
  speed ()
  {
    return this->speed_.get ();
  }

  void item::
  speed (const speed_type& x)
  {
    this->speed_.set (x);
  }

  const item::bitmap_type& item::
  bitmap () const
  {
    return this->bitmap_.get ();
  }

  item::bitmap_type& item::
  bitmap ()
  {
    return this->bitmap_.get ();
  }

  void item::
  bitmap (const bitmap_type& x)
  {
    this->bitmap_.set (x);
  }

  void item::
  bitmap (::std::auto_ptr< bitmap_type > x)
  {
    this->bitmap_.set (x);
  }

  const item::shadow_optional& item::
  shadow () const
  {
    return this->shadow_;
  }

  item::shadow_optional& item::
  shadow ()
  {
    return this->shadow_;
  }

  void item::
  shadow (const shadow_type& x)
  {
    this->shadow_.set (x);
  }

  void item::
  shadow (const shadow_optional& x)
  {
    this->shadow_ = x;
  }

  void item::
  shadow (::std::auto_ptr< shadow_type > x)
  {
    this->shadow_.set (x);
  }

  const item::extraFrames_optional& item::
  extraFrames () const
  {
    return this->extraFrames_;
  }

  item::extraFrames_optional& item::
  extraFrames ()
  {
    return this->extraFrames_;
  }

  void item::
  extraFrames (const extraFrames_type& x)
  {
    this->extraFrames_.set (x);
  }

  void item::
  extraFrames (const extraFrames_optional& x)
  {
    this->extraFrames_ = x;
  }

  const item::frame_sequence& item::
  frame () const
  {
    return this->frame_;
  }

  item::frame_sequence& item::
  frame ()
  {
    return this->frame_;
  }

  void item::
  frame (const frame_sequence& s)
  {
    this->frame_ = s;
  }

  const item::label_type& item::
  label () const
  {
    return this->label_.get ();
  }

  item::label_type& item::
  label ()
  {
    return this->label_.get ();
  }

  void item::
  label (const label_type& x)
  {
    this->label_.set (x);
  }


  // door
  // 

  door::
  door (value v)
  : ::xml_schema::string (_xsd_door_literals_[v])
  {
  }

  door::
  door (const char* v)
  : ::xml_schema::string (v)
  {
  }

  door::
  door (const ::std::string& v)
  : ::xml_schema::string (v)
  {
  }

  door::
  door (const ::xml_schema::string& v)
  : ::xml_schema::string (v)
  {
  }

  door::
  door (const door& v,
        ::xml_schema::flags f,
        ::xml_schema::container* c)
  : ::xml_schema::string (v, f, c)
  {
  }

  door& door::
  operator= (value v)
  {
    static_cast< ::xml_schema::string& > (*this) = 
    ::xml_schema::string (_xsd_door_literals_[v]);

    return *this;
  }


  // bitmap
  // 

  const bitmap::frameWidth_type& bitmap::
  frameWidth () const
  {
    return this->frameWidth_.get ();
  }

  bitmap::frameWidth_type& bitmap::
  frameWidth ()
  {
    return this->frameWidth_.get ();
  }

  void bitmap::
  frameWidth (const frameWidth_type& x)
  {
    this->frameWidth_.set (x);
  }

  const bitmap::frameHeight_type& bitmap::
  frameHeight () const
  {
    return this->frameHeight_.get ();
  }

  bitmap::frameHeight_type& bitmap::
  frameHeight ()
  {
    return this->frameHeight_.get ();
  }

  void bitmap::
  frameHeight (const frameHeight_type& x)
  {
    this->frameHeight_.set (x);
  }

  const bitmap::file_type& bitmap::
  file () const
  {
    return this->file_.get ();
  }

  bitmap::file_type& bitmap::
  file ()
  {
    return this->file_.get ();
  }

  void bitmap::
  file (const file_type& x)
  {
    this->file_.set (x);
  }

  void bitmap::
  file (::std::auto_ptr< file_type > x)
  {
    this->file_.set (x);
  }


  // shadow
  // 

  const shadow::shadowWidth_type& shadow::
  shadowWidth () const
  {
    return this->shadowWidth_.get ();
  }

  shadow::shadowWidth_type& shadow::
  shadowWidth ()
  {
    return this->shadowWidth_.get ();
  }

  void shadow::
  shadowWidth (const shadowWidth_type& x)
  {
    this->shadowWidth_.set (x);
  }

  const shadow::shadowHeight_type& shadow::
  shadowHeight () const
  {
    return this->shadowHeight_.get ();
  }

  shadow::shadowHeight_type& shadow::
  shadowHeight ()
  {
    return this->shadowHeight_.get ();
  }

  void shadow::
  shadowHeight (const shadowHeight_type& x)
  {
    this->shadowHeight_.set (x);
  }

  const shadow::file_type& shadow::
  file () const
  {
    return this->file_.get ();
  }

  shadow::file_type& shadow::
  file ()
  {
    return this->file_.get ();
  }

  void shadow::
  file (const file_type& x)
  {
    this->file_.set (x);
  }

  void shadow::
  file (::std::auto_ptr< file_type > x)
  {
    this->file_.set (x);
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace ixml
{
  // ItemsXML
  //

  ItemsXML::
  ItemsXML ()
  : ::xml_schema::type (),
    item_ (this)
  {
  }

  ItemsXML::
  ItemsXML (const ItemsXML& x,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    item_ (x.item_, f, this)
  {
  }

  ItemsXML::
  ItemsXML (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    item_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void ItemsXML::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // item
      //
      if (n.name () == "item" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< item_type > r (
          item_traits::create (i, f, this));

        this->item_.push_back (r);
        continue;
      }

      break;
    }
  }

  ItemsXML* ItemsXML::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class ItemsXML (*this, f, c);
  }

  ItemsXML& ItemsXML::
  operator= (const ItemsXML& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::type& > (*this) = x;
      this->item_ = x.item_;
    }

    return *this;
  }

  ItemsXML::
  ~ItemsXML ()
  {
  }

  // item
  //

  item::
  item (const directionFrames_type& directionFrames,
        const mortal_type& mortal,
        const weight_type& weight,
        const framesDelay_type& framesDelay,
        const speed_type& speed,
        const bitmap_type& bitmap,
        const label_type& label)
  : ::xml_schema::type (),
    door_ (this),
    widthX_ (this),
    widthY_ (this),
    height_ (this),
    directionFrames_ (directionFrames, this),
    mortal_ (mortal, this),
    weight_ (weight, this),
    framesDelay_ (framesDelay, this),
    speed_ (speed, this),
    bitmap_ (bitmap, this),
    shadow_ (this),
    extraFrames_ (this),
    frame_ (this),
    label_ (label, this)
  {
  }

  item::
  item (const directionFrames_type& directionFrames,
        const mortal_type& mortal,
        const weight_type& weight,
        const framesDelay_type& framesDelay,
        const speed_type& speed,
        ::std::auto_ptr< bitmap_type > bitmap,
        const label_type& label)
  : ::xml_schema::type (),
    door_ (this),
    widthX_ (this),
    widthY_ (this),
    height_ (this),
    directionFrames_ (directionFrames, this),
    mortal_ (mortal, this),
    weight_ (weight, this),
    framesDelay_ (framesDelay, this),
    speed_ (speed, this),
    bitmap_ (bitmap, this),
    shadow_ (this),
    extraFrames_ (this),
    frame_ (this),
    label_ (label, this)
  {
  }

  item::
  item (const item& x,
        ::xml_schema::flags f,
        ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    door_ (x.door_, f, this),
    widthX_ (x.widthX_, f, this),
    widthY_ (x.widthY_, f, this),
    height_ (x.height_, f, this),
    directionFrames_ (x.directionFrames_, f, this),
    mortal_ (x.mortal_, f, this),
    weight_ (x.weight_, f, this),
    framesDelay_ (x.framesDelay_, f, this),
    speed_ (x.speed_, f, this),
    bitmap_ (x.bitmap_, f, this),
    shadow_ (x.shadow_, f, this),
    extraFrames_ (x.extraFrames_, f, this),
    frame_ (x.frame_, f, this),
    label_ (x.label_, f, this)
  {
  }

  item::
  item (const ::xercesc::DOMElement& e,
        ::xml_schema::flags f,
        ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    door_ (this),
    widthX_ (this),
    widthY_ (this),
    height_ (this),
    directionFrames_ (this),
    mortal_ (this),
    weight_ (this),
    framesDelay_ (this),
    speed_ (this),
    bitmap_ (this),
    shadow_ (this),
    extraFrames_ (this),
    frame_ (this),
    label_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
      this->parse (p, f);
    }
  }

  void item::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // door
      //
      if (n.name () == "door" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< door_type > r (
          door_traits::create (i, f, this));

        if (!this->door_)
        {
          this->door_.set (r);
          continue;
        }
      }

      // widthX
      //
      if (n.name () == "widthX" && n.namespace_ ().empty ())
      {
        this->widthX_.push_back (widthX_traits::create (i, f, this));
        continue;
      }

      // widthY
      //
      if (n.name () == "widthY" && n.namespace_ ().empty ())
      {
        this->widthY_.push_back (widthY_traits::create (i, f, this));
        continue;
      }

      // height
      //
      if (n.name () == "height" && n.namespace_ ().empty ())
      {
        this->height_.push_back (height_traits::create (i, f, this));
        continue;
      }

      // directionFrames
      //
      if (n.name () == "directionFrames" && n.namespace_ ().empty ())
      {
        if (!directionFrames_.present ())
        {
          this->directionFrames_.set (directionFrames_traits::create (i, f, this));
          continue;
        }
      }

      // mortal
      //
      if (n.name () == "mortal" && n.namespace_ ().empty ())
      {
        if (!mortal_.present ())
        {
          this->mortal_.set (mortal_traits::create (i, f, this));
          continue;
        }
      }

      // weight
      //
      if (n.name () == "weight" && n.namespace_ ().empty ())
      {
        if (!weight_.present ())
        {
          this->weight_.set (weight_traits::create (i, f, this));
          continue;
        }
      }

      // framesDelay
      //
      if (n.name () == "framesDelay" && n.namespace_ ().empty ())
      {
        if (!framesDelay_.present ())
        {
          this->framesDelay_.set (framesDelay_traits::create (i, f, this));
          continue;
        }
      }

      // speed
      //
      if (n.name () == "speed" && n.namespace_ ().empty ())
      {
        if (!speed_.present ())
        {
          this->speed_.set (speed_traits::create (i, f, this));
          continue;
        }
      }

      // bitmap
      //
      if (n.name () == "bitmap" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< bitmap_type > r (
          bitmap_traits::create (i, f, this));

        if (!bitmap_.present ())
        {
          this->bitmap_.set (r);
          continue;
        }
      }

      // shadow
      //
      if (n.name () == "shadow" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< shadow_type > r (
          shadow_traits::create (i, f, this));

        if (!this->shadow_)
        {
          this->shadow_.set (r);
          continue;
        }
      }

      // extraFrames
      //
      if (n.name () == "extraFrames" && n.namespace_ ().empty ())
      {
        if (!this->extraFrames_)
        {
          this->extraFrames_.set (extraFrames_traits::create (i, f, this));
          continue;
        }
      }

      // frame
      //
      if (n.name () == "frame" && n.namespace_ ().empty ())
      {
        this->frame_.push_back (frame_traits::create (i, f, this));
        continue;
      }

      break;
    }

    if (!directionFrames_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "directionFrames",
        "");
    }

    if (!mortal_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "mortal",
        "");
    }

    if (!weight_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "weight",
        "");
    }

    if (!framesDelay_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "framesDelay",
        "");
    }

    if (!speed_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "speed",
        "");
    }

    if (!bitmap_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "bitmap",
        "");
    }

    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "label" && n.namespace_ ().empty ())
      {
        this->label_.set (label_traits::create (i, f, this));
        continue;
      }
    }

    if (!label_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "label",
        "");
    }
  }

  item* item::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class item (*this, f, c);
  }

  item& item::
  operator= (const item& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::type& > (*this) = x;
      this->door_ = x.door_;
      this->widthX_ = x.widthX_;
      this->widthY_ = x.widthY_;
      this->height_ = x.height_;
      this->directionFrames_ = x.directionFrames_;
      this->mortal_ = x.mortal_;
      this->weight_ = x.weight_;
      this->framesDelay_ = x.framesDelay_;
      this->speed_ = x.speed_;
      this->bitmap_ = x.bitmap_;
      this->shadow_ = x.shadow_;
      this->extraFrames_ = x.extraFrames_;
      this->frame_ = x.frame_;
      this->label_ = x.label_;
    }

    return *this;
  }

  item::
  ~item ()
  {
  }

  // door
  //

  door::
  door (const ::xercesc::DOMElement& e,
        ::xml_schema::flags f,
        ::xml_schema::container* c)
  : ::xml_schema::string (e, f, c)
  {
    _xsd_door_convert ();
  }

  door::
  door (const ::xercesc::DOMAttr& a,
        ::xml_schema::flags f,
        ::xml_schema::container* c)
  : ::xml_schema::string (a, f, c)
  {
    _xsd_door_convert ();
  }

  door::
  door (const ::std::string& s,
        const ::xercesc::DOMElement* e,
        ::xml_schema::flags f,
        ::xml_schema::container* c)
  : ::xml_schema::string (s, e, f, c)
  {
    _xsd_door_convert ();
  }

  door* door::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class door (*this, f, c);
  }

  door::value door::
  _xsd_door_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_door_literals_);
    const value* i (::std::lower_bound (
                      _xsd_door_indexes_,
                      _xsd_door_indexes_ + 4,
                      *this,
                      c));

    if (i == _xsd_door_indexes_ + 4 || _xsd_door_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const door::
  _xsd_door_literals_[4] =
  {
    "north",
    "south",
    "east",
    "west"
  };

  const door::value door::
  _xsd_door_indexes_[4] =
  {
    ::ixml::door::east,
    ::ixml::door::north,
    ::ixml::door::south,
    ::ixml::door::west
  };

  // bitmap
  //

  bitmap::
  bitmap (const frameWidth_type& frameWidth,
          const frameHeight_type& frameHeight,
          const file_type& file)
  : ::xml_schema::type (),
    frameWidth_ (frameWidth, this),
    frameHeight_ (frameHeight, this),
    file_ (file, this)
  {
  }

  bitmap::
  bitmap (const bitmap& x,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    frameWidth_ (x.frameWidth_, f, this),
    frameHeight_ (x.frameHeight_, f, this),
    file_ (x.file_, f, this)
  {
  }

  bitmap::
  bitmap (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    frameWidth_ (this),
    frameHeight_ (this),
    file_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
      this->parse (p, f);
    }
  }

  void bitmap::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // frameWidth
      //
      if (n.name () == "frameWidth" && n.namespace_ ().empty ())
      {
        if (!frameWidth_.present ())
        {
          this->frameWidth_.set (frameWidth_traits::create (i, f, this));
          continue;
        }
      }

      // frameHeight
      //
      if (n.name () == "frameHeight" && n.namespace_ ().empty ())
      {
        if (!frameHeight_.present ())
        {
          this->frameHeight_.set (frameHeight_traits::create (i, f, this));
          continue;
        }
      }

      break;
    }

    if (!frameWidth_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "frameWidth",
        "");
    }

    if (!frameHeight_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "frameHeight",
        "");
    }

    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "file" && n.namespace_ ().empty ())
      {
        this->file_.set (file_traits::create (i, f, this));
        continue;
      }
    }

    if (!file_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "file",
        "");
    }
  }

  bitmap* bitmap::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class bitmap (*this, f, c);
  }

  bitmap& bitmap::
  operator= (const bitmap& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::type& > (*this) = x;
      this->frameWidth_ = x.frameWidth_;
      this->frameHeight_ = x.frameHeight_;
      this->file_ = x.file_;
    }

    return *this;
  }

  bitmap::
  ~bitmap ()
  {
  }

  // shadow
  //

  shadow::
  shadow (const shadowWidth_type& shadowWidth,
          const shadowHeight_type& shadowHeight,
          const file_type& file)
  : ::xml_schema::type (),
    shadowWidth_ (shadowWidth, this),
    shadowHeight_ (shadowHeight, this),
    file_ (file, this)
  {
  }

  shadow::
  shadow (const shadow& x,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    shadowWidth_ (x.shadowWidth_, f, this),
    shadowHeight_ (x.shadowHeight_, f, this),
    file_ (x.file_, f, this)
  {
  }

  shadow::
  shadow (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    shadowWidth_ (this),
    shadowHeight_ (this),
    file_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
      this->parse (p, f);
    }
  }

  void shadow::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // shadowWidth
      //
      if (n.name () == "shadowWidth" && n.namespace_ ().empty ())
      {
        if (!shadowWidth_.present ())
        {
          this->shadowWidth_.set (shadowWidth_traits::create (i, f, this));
          continue;
        }
      }

      // shadowHeight
      //
      if (n.name () == "shadowHeight" && n.namespace_ ().empty ())
      {
        if (!shadowHeight_.present ())
        {
          this->shadowHeight_.set (shadowHeight_traits::create (i, f, this));
          continue;
        }
      }

      break;
    }

    if (!shadowWidth_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "shadowWidth",
        "");
    }

    if (!shadowHeight_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "shadowHeight",
        "");
    }

    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "file" && n.namespace_ ().empty ())
      {
        this->file_.set (file_traits::create (i, f, this));
        continue;
      }
    }

    if (!file_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "file",
        "");
    }
  }

  shadow* shadow::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class shadow (*this, f, c);
  }

  shadow& shadow::
  operator= (const shadow& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::type& > (*this) = x;
      this->shadowWidth_ = x.shadowWidth_;
      this->shadowHeight_ = x.shadowHeight_;
      this->file_ = x.file_;
    }

    return *this;
  }

  shadow::
  ~shadow ()
  {
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace ixml
{
  ::std::auto_ptr< ::ixml::ItemsXML >
  items (const ::std::string& u,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::auto_ptr< ::ixml::ItemsXML > (
      ::ixml::items (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::ixml::ItemsXML >
  items (const ::std::string& u,
         ::xml_schema::error_handler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::ixml::ItemsXML > (
      ::ixml::items (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::ixml::ItemsXML >
  items (const ::std::string& u,
         ::xercesc::DOMErrorHandler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::ixml::ItemsXML > (
      ::ixml::items (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::ixml::ItemsXML >
  items (::std::istream& is,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::ixml::items (isrc, f, p);
  }

  ::std::auto_ptr< ::ixml::ItemsXML >
  items (::std::istream& is,
         ::xml_schema::error_handler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::ixml::items (isrc, h, f, p);
  }

  ::std::auto_ptr< ::ixml::ItemsXML >
  items (::std::istream& is,
         ::xercesc::DOMErrorHandler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::ixml::items (isrc, h, f, p);
  }

  ::std::auto_ptr< ::ixml::ItemsXML >
  items (::std::istream& is,
         const ::std::string& sid,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::ixml::items (isrc, f, p);
  }

  ::std::auto_ptr< ::ixml::ItemsXML >
  items (::std::istream& is,
         const ::std::string& sid,
         ::xml_schema::error_handler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::ixml::items (isrc, h, f, p);
  }

  ::std::auto_ptr< ::ixml::ItemsXML >
  items (::std::istream& is,
         const ::std::string& sid,
         ::xercesc::DOMErrorHandler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::ixml::items (isrc, h, f, p);
  }

  ::std::auto_ptr< ::ixml::ItemsXML >
  items (::xercesc::InputSource& i,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::auto_ptr< ::ixml::ItemsXML > (
      ::ixml::items (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::ixml::ItemsXML >
  items (::xercesc::InputSource& i,
         ::xml_schema::error_handler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::ixml::ItemsXML > (
      ::ixml::items (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::ixml::ItemsXML >
  items (::xercesc::InputSource& i,
         ::xercesc::DOMErrorHandler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::auto_ptr< ::ixml::ItemsXML > (
      ::ixml::items (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  ::std::auto_ptr< ::ixml::ItemsXML >
  items (const ::xercesc::DOMDocument& doc,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

      return ::std::auto_ptr< ::ixml::ItemsXML > (
        ::ixml::items (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "items" &&
        n.namespace_ () == "")
    {
      ::std::auto_ptr< ::ixml::ItemsXML > r (
        ::xsd::cxx::tree::traits< ::ixml::ItemsXML, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "items",
      "");
  }

  ::std::auto_ptr< ::ixml::ItemsXML >
  items (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
         ::xml_schema::flags f,
         const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "items" &&
        n.namespace_ () == "")
    {
      ::std::auto_ptr< ::ixml::ItemsXML > r (
        ::xsd::cxx::tree::traits< ::ixml::ItemsXML, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "items",
      "");
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

namespace ixml
{
  void
  items (::std::ostream& o,
         const ::ixml::ItemsXML& s,
         const ::xml_schema::namespace_infomap& m,
         const ::std::string& e,
         ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::ixml::items (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  items (::std::ostream& o,
         const ::ixml::ItemsXML& s,
         ::xml_schema::error_handler& h,
         const ::xml_schema::namespace_infomap& m,
         const ::std::string& e,
         ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::ixml::items (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  items (::std::ostream& o,
         const ::ixml::ItemsXML& s,
         ::xercesc::DOMErrorHandler& h,
         const ::xml_schema::namespace_infomap& m,
         const ::std::string& e,
         ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::ixml::items (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  items (::xercesc::XMLFormatTarget& t,
         const ::ixml::ItemsXML& s,
         const ::xml_schema::namespace_infomap& m,
         const ::std::string& e,
         ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::ixml::items (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  items (::xercesc::XMLFormatTarget& t,
         const ::ixml::ItemsXML& s,
         ::xml_schema::error_handler& h,
         const ::xml_schema::namespace_infomap& m,
         const ::std::string& e,
         ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::ixml::items (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  items (::xercesc::XMLFormatTarget& t,
         const ::ixml::ItemsXML& s,
         ::xercesc::DOMErrorHandler& h,
         const ::xml_schema::namespace_infomap& m,
         const ::std::string& e,
         ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::ixml::items (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  items (::xercesc::DOMDocument& d,
         const ::ixml::ItemsXML& s,
         ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "items" &&
        n.namespace_ () == "")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "items",
        "");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  items (const ::ixml::ItemsXML& s,
         const ::xml_schema::namespace_infomap& m,
         ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "items",
        "",
        m, f));

    ::ixml::items (*d, s, f);
    return d;
  }

  void
  operator<< (::xercesc::DOMElement& e, const ItemsXML& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // item
    //
    for (ItemsXML::item_const_iterator
         b (i.item ().begin ()), n (i.item ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "item",
          e));

      s << *b;
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const item& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // door
    //
    if (i.door ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "door",
          e));

      s << *i.door ();
    }

    // widthX
    //
    for (item::widthX_const_iterator
         b (i.widthX ().begin ()), n (i.widthX ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "widthX",
          e));

      s << *b;
    }

    // widthY
    //
    for (item::widthY_const_iterator
         b (i.widthY ().begin ()), n (i.widthY ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "widthY",
          e));

      s << *b;
    }

    // height
    //
    for (item::height_const_iterator
         b (i.height ().begin ()), n (i.height ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "height",
          e));

      s << *b;
    }

    // directionFrames
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "directionFrames",
          e));

      s << i.directionFrames ();
    }

    // mortal
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "mortal",
          e));

      s << i.mortal ();
    }

    // weight
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "weight",
          e));

      s << ::xml_schema::as_double(i.weight ());
    }

    // framesDelay
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "framesDelay",
          e));

      s << ::xml_schema::as_double(i.framesDelay ());
    }

    // speed
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "speed",
          e));

      s << ::xml_schema::as_double(i.speed ());
    }

    // bitmap
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "bitmap",
          e));

      s << i.bitmap ();
    }

    // shadow
    //
    if (i.shadow ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "shadow",
          e));

      s << *i.shadow ();
    }

    // extraFrames
    //
    if (i.extraFrames ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "extraFrames",
          e));

      s << *i.extraFrames ();
    }

    // frame
    //
    for (item::frame_const_iterator
         b (i.frame ().begin ()), n (i.frame ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "frame",
          e));

      s << *b;
    }

    // label
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "label",
          e));

      a << i.label ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const door& i)
  {
    e << static_cast< const ::xml_schema::string& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const door& i)
  {
    a << static_cast< const ::xml_schema::string& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const door& i)
  {
    l << static_cast< const ::xml_schema::string& > (i);
  }

  void
  operator<< (::xercesc::DOMElement& e, const bitmap& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // frameWidth
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "frameWidth",
          e));

      s << i.frameWidth ();
    }

    // frameHeight
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "frameHeight",
          e));

      s << i.frameHeight ();
    }

    // file
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "file",
          e));

      a << i.file ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const shadow& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // shadowWidth
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "shadowWidth",
          e));

      s << i.shadowWidth ();
    }

    // shadowHeight
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "shadowHeight",
          e));

      s << i.shadowHeight ();
    }

    // file
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "file",
          e));

      a << i.file ();
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

